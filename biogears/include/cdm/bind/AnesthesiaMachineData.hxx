// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from AnesthesiaMachineData.xsd.
 */

#ifndef ANESTHESIA_MACHINE_DATA_HXX
#define ANESTHESIA_MACHINE_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "cdm-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class AnesthesiaMachineData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "SystemData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumePerTimeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFractionData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class enumAnesthesiaMachineOxygenSource;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarPressureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class enumAnesthesiaMachinePrimaryGas;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFrequencyData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class enumOnOff;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class AnesthesiaMachineChamberData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class AnesthesiaMachineOxygenBottleData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %AnesthesiaMachineData schema type.
         *
         * @nosubgrouping
         */
        class __attribute__ ((visibility ("default"))) AnesthesiaMachineData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name InletFlow
           *
           * @brief Accessor and modifier functions for the %InletFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData InletFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InletFlow_type > InletFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InletFlow_type, char > InletFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InletFlow_optional&
          InletFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InletFlow_optional&
          InletFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InletFlow (const InletFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InletFlow (const InletFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InletFlow (::std::unique_ptr< InletFlow_type > p);

          //@}

          /**
           * @name InspiratoryExpiratoryRatio
           *
           * @brief Accessor and modifier functions for the %InspiratoryExpiratoryRatio
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData InspiratoryExpiratoryRatio_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InspiratoryExpiratoryRatio_type > InspiratoryExpiratoryRatio_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InspiratoryExpiratoryRatio_type, char > InspiratoryExpiratoryRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InspiratoryExpiratoryRatio_optional&
          InspiratoryExpiratoryRatio () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InspiratoryExpiratoryRatio_optional&
          InspiratoryExpiratoryRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InspiratoryExpiratoryRatio (const InspiratoryExpiratoryRatio_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InspiratoryExpiratoryRatio (const InspiratoryExpiratoryRatio_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InspiratoryExpiratoryRatio (::std::unique_ptr< InspiratoryExpiratoryRatio_type > p);

          //@}

          /**
           * @name OxygenFraction
           *
           * @brief Accessor and modifier functions for the %OxygenFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData OxygenFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OxygenFraction_type > OxygenFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenFraction_type, char > OxygenFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OxygenFraction_optional&
          OxygenFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          OxygenFraction_optional&
          OxygenFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenFraction (const OxygenFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          OxygenFraction (const OxygenFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          OxygenFraction (::std::unique_ptr< OxygenFraction_type > p);

          //@}

          /**
           * @name OxygenSource
           *
           * @brief Accessor and modifier functions for the %OxygenSource
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumAnesthesiaMachineOxygenSource OxygenSource_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OxygenSource_type > OxygenSource_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenSource_type, char > OxygenSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OxygenSource_optional&
          OxygenSource () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          OxygenSource_optional&
          OxygenSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenSource (const OxygenSource_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          OxygenSource (const OxygenSource_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          OxygenSource (::std::unique_ptr< OxygenSource_type > p);

          //@}

          /**
           * @name PositiveEndExpiredPressure
           *
           * @brief Accessor and modifier functions for the %PositiveEndExpiredPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PositiveEndExpiredPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PositiveEndExpiredPressure_type > PositiveEndExpiredPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PositiveEndExpiredPressure_type, char > PositiveEndExpiredPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PositiveEndExpiredPressure_optional&
          PositiveEndExpiredPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PositiveEndExpiredPressure_optional&
          PositiveEndExpiredPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PositiveEndExpiredPressure (const PositiveEndExpiredPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PositiveEndExpiredPressure (const PositiveEndExpiredPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PositiveEndExpiredPressure (::std::unique_ptr< PositiveEndExpiredPressure_type > p);

          //@}

          /**
           * @name PrimaryGas
           *
           * @brief Accessor and modifier functions for the %PrimaryGas
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumAnesthesiaMachinePrimaryGas PrimaryGas_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PrimaryGas_type > PrimaryGas_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PrimaryGas_type, char > PrimaryGas_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PrimaryGas_optional&
          PrimaryGas () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PrimaryGas_optional&
          PrimaryGas ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PrimaryGas (const PrimaryGas_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PrimaryGas (const PrimaryGas_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PrimaryGas (::std::unique_ptr< PrimaryGas_type > p);

          //@}

          /**
           * @name ReliefValvePressure
           *
           * @brief Accessor and modifier functions for the %ReliefValvePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData ReliefValvePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ReliefValvePressure_type > ReliefValvePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ReliefValvePressure_type, char > ReliefValvePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ReliefValvePressure_optional&
          ReliefValvePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ReliefValvePressure_optional&
          ReliefValvePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ReliefValvePressure (const ReliefValvePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ReliefValvePressure (const ReliefValvePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ReliefValvePressure (::std::unique_ptr< ReliefValvePressure_type > p);

          //@}

          /**
           * @name RespiratoryRate
           *
           * @brief Accessor and modifier functions for the %RespiratoryRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFrequencyData RespiratoryRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespiratoryRate_type > RespiratoryRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespiratoryRate_type, char > RespiratoryRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespiratoryRate_optional&
          RespiratoryRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespiratoryRate_optional&
          RespiratoryRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespiratoryRate (const RespiratoryRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespiratoryRate (const RespiratoryRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespiratoryRate (::std::unique_ptr< RespiratoryRate_type > p);

          //@}

          /**
           * @name VentilatorMask
           *
           * @brief Accessor and modifier functions for the %VentilatorMask
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff VentilatorMask_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VentilatorMask_type > VentilatorMask_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VentilatorMask_type, char > VentilatorMask_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VentilatorMask_optional&
          VentilatorMask () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VentilatorMask_optional&
          VentilatorMask ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VentilatorMask (const VentilatorMask_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VentilatorMask (const VentilatorMask_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VentilatorMask (::std::unique_ptr< VentilatorMask_type > p);

          //@}

          /**
           * @name VentilatorPressure
           *
           * @brief Accessor and modifier functions for the %VentilatorPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData VentilatorPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VentilatorPressure_type > VentilatorPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VentilatorPressure_type, char > VentilatorPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VentilatorPressure_optional&
          VentilatorPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VentilatorPressure_optional&
          VentilatorPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VentilatorPressure (const VentilatorPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VentilatorPressure (const VentilatorPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VentilatorPressure (::std::unique_ptr< VentilatorPressure_type > p);

          //@}

          /**
           * @name LeftChamber
           *
           * @brief Accessor and modifier functions for the %LeftChamber
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::AnesthesiaMachineChamberData LeftChamber_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftChamber_type > LeftChamber_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftChamber_type, char > LeftChamber_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftChamber_optional&
          LeftChamber () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftChamber_optional&
          LeftChamber ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftChamber (const LeftChamber_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftChamber (const LeftChamber_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftChamber (::std::unique_ptr< LeftChamber_type > p);

          //@}

          /**
           * @name RightChamber
           *
           * @brief Accessor and modifier functions for the %RightChamber
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::AnesthesiaMachineChamberData RightChamber_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightChamber_type > RightChamber_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightChamber_type, char > RightChamber_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightChamber_optional&
          RightChamber () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightChamber_optional&
          RightChamber ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightChamber (const RightChamber_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightChamber (const RightChamber_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightChamber (::std::unique_ptr< RightChamber_type > p);

          //@}

          /**
           * @name OxygenBottleOne
           *
           * @brief Accessor and modifier functions for the %OxygenBottleOne
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::AnesthesiaMachineOxygenBottleData OxygenBottleOne_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OxygenBottleOne_type > OxygenBottleOne_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenBottleOne_type, char > OxygenBottleOne_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OxygenBottleOne_optional&
          OxygenBottleOne () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          OxygenBottleOne_optional&
          OxygenBottleOne ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenBottleOne (const OxygenBottleOne_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          OxygenBottleOne (const OxygenBottleOne_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          OxygenBottleOne (::std::unique_ptr< OxygenBottleOne_type > p);

          //@}

          /**
           * @name OxygenBottleTwo
           *
           * @brief Accessor and modifier functions for the %OxygenBottleTwo
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::AnesthesiaMachineOxygenBottleData OxygenBottleTwo_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OxygenBottleTwo_type > OxygenBottleTwo_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenBottleTwo_type, char > OxygenBottleTwo_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OxygenBottleTwo_optional&
          OxygenBottleTwo () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          OxygenBottleTwo_optional&
          OxygenBottleTwo ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenBottleTwo (const OxygenBottleTwo_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          OxygenBottleTwo (const OxygenBottleTwo_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          OxygenBottleTwo (::std::unique_ptr< OxygenBottleTwo_type > p);

          //@}

          /**
           * @name State
           *
           * @brief Accessor and modifier functions for the %State
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff State_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< State_type > State_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< State_type, char > State_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const State_optional&
          State () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          State_optional&
          State ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          State (const State_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          State (const State_optional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          State (::std::unique_ptr< State_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          AnesthesiaMachineData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AnesthesiaMachineData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AnesthesiaMachineData (const AnesthesiaMachineData& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AnesthesiaMachineData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AnesthesiaMachineData&
          operator= (const AnesthesiaMachineData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~AnesthesiaMachineData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          InletFlow_optional InletFlow_;
          InspiratoryExpiratoryRatio_optional InspiratoryExpiratoryRatio_;
          OxygenFraction_optional OxygenFraction_;
          OxygenSource_optional OxygenSource_;
          PositiveEndExpiredPressure_optional PositiveEndExpiredPressure_;
          PrimaryGas_optional PrimaryGas_;
          ReliefValvePressure_optional ReliefValvePressure_;
          RespiratoryRate_optional RespiratoryRate_;
          VentilatorMask_optional VentilatorMask_;
          VentilatorPressure_optional VentilatorPressure_;
          LeftChamber_optional LeftChamber_;
          RightChamber_optional RightChamber_;
          OxygenBottleOne_optional OxygenBottleOne_;
          OxygenBottleTwo_optional OxygenBottleTwo_;
          State_optional State_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        __attribute__ ((visibility ("default")))
        ::std::ostream&
        operator<< (::std::ostream&, const AnesthesiaMachineData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        __attribute__ ((visibility ("default")))
        void
        operator<< (::xercesc::DOMElement&, const AnesthesiaMachineData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "decimal.hxx"

#include "double-parsing.hxx"
#include "decimal-parsing.hxx"

#include "double-serialization.hxx"
#include "decimal-serialization.hxx"
//
// End epilogue.

#endif // ANESTHESIA_MACHINE_DATA_HXX
