// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from BaroreceptorConfiguration.xsd.
 */

#ifndef BARORECEPTOR_CONFIGURATION_HXX
#define BARORECEPTOR_CONFIGURATION_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "cdm-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class BaroreceptorConfiguration;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarTimeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %BaroreceptorConfiguration schema type.
         *
         * @nosubgrouping
         */
        class BaroreceptorConfiguration: public ::xml_schema::type
        {
          public:
          /**
           * @name ResponseSlope
           *
           * @brief Accessor and modifier functions for the %ResponseSlope
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ResponseSlope_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ResponseSlope_type > ResponseSlope_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResponseSlope_type, char > ResponseSlope_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ResponseSlope_optional&
          ResponseSlope () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ResponseSlope_optional&
          ResponseSlope ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ResponseSlope (const ResponseSlope_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ResponseSlope (const ResponseSlope_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ResponseSlope (::std::unique_ptr< ResponseSlope_type > p);

          //@}

          /**
           * @name HeartRateDistributedTimeDelay
           *
           * @brief Accessor and modifier functions for the %HeartRateDistributedTimeDelay
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData HeartRateDistributedTimeDelay_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartRateDistributedTimeDelay_type > HeartRateDistributedTimeDelay_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartRateDistributedTimeDelay_type, char > HeartRateDistributedTimeDelay_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartRateDistributedTimeDelay_optional&
          HeartRateDistributedTimeDelay () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartRateDistributedTimeDelay_optional&
          HeartRateDistributedTimeDelay ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartRateDistributedTimeDelay (const HeartRateDistributedTimeDelay_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartRateDistributedTimeDelay (const HeartRateDistributedTimeDelay_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartRateDistributedTimeDelay (::std::unique_ptr< HeartRateDistributedTimeDelay_type > p);

          //@}

          /**
           * @name HeartElastanceDistributedTimeDelay
           *
           * @brief Accessor and modifier functions for the %HeartElastanceDistributedTimeDelay
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData HeartElastanceDistributedTimeDelay_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartElastanceDistributedTimeDelay_type > HeartElastanceDistributedTimeDelay_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartElastanceDistributedTimeDelay_type, char > HeartElastanceDistributedTimeDelay_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartElastanceDistributedTimeDelay_optional&
          HeartElastanceDistributedTimeDelay () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartElastanceDistributedTimeDelay_optional&
          HeartElastanceDistributedTimeDelay ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartElastanceDistributedTimeDelay (const HeartElastanceDistributedTimeDelay_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartElastanceDistributedTimeDelay (const HeartElastanceDistributedTimeDelay_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartElastanceDistributedTimeDelay (::std::unique_ptr< HeartElastanceDistributedTimeDelay_type > p);

          //@}

          /**
           * @name SystemicResistanceDistributedTimeDelay
           *
           * @brief Accessor and modifier functions for the %SystemicResistanceDistributedTimeDelay
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData SystemicResistanceDistributedTimeDelay_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SystemicResistanceDistributedTimeDelay_type > SystemicResistanceDistributedTimeDelay_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SystemicResistanceDistributedTimeDelay_type, char > SystemicResistanceDistributedTimeDelay_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SystemicResistanceDistributedTimeDelay_optional&
          SystemicResistanceDistributedTimeDelay () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SystemicResistanceDistributedTimeDelay_optional&
          SystemicResistanceDistributedTimeDelay ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SystemicResistanceDistributedTimeDelay (const SystemicResistanceDistributedTimeDelay_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SystemicResistanceDistributedTimeDelay (const SystemicResistanceDistributedTimeDelay_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SystemicResistanceDistributedTimeDelay (::std::unique_ptr< SystemicResistanceDistributedTimeDelay_type > p);

          //@}

          /**
           * @name VenousComplianceDistributedTimeDelay
           *
           * @brief Accessor and modifier functions for the %VenousComplianceDistributedTimeDelay
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData VenousComplianceDistributedTimeDelay_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VenousComplianceDistributedTimeDelay_type > VenousComplianceDistributedTimeDelay_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VenousComplianceDistributedTimeDelay_type, char > VenousComplianceDistributedTimeDelay_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VenousComplianceDistributedTimeDelay_optional&
          VenousComplianceDistributedTimeDelay () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VenousComplianceDistributedTimeDelay_optional&
          VenousComplianceDistributedTimeDelay ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VenousComplianceDistributedTimeDelay (const VenousComplianceDistributedTimeDelay_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VenousComplianceDistributedTimeDelay (const VenousComplianceDistributedTimeDelay_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VenousComplianceDistributedTimeDelay (::std::unique_ptr< VenousComplianceDistributedTimeDelay_type > p);

          //@}

          /**
           * @name NormalizedHeartRateIntercept
           *
           * @brief Accessor and modifier functions for the %NormalizedHeartRateIntercept
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NormalizedHeartRateIntercept_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NormalizedHeartRateIntercept_type > NormalizedHeartRateIntercept_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NormalizedHeartRateIntercept_type, char > NormalizedHeartRateIntercept_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NormalizedHeartRateIntercept_optional&
          NormalizedHeartRateIntercept () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NormalizedHeartRateIntercept_optional&
          NormalizedHeartRateIntercept ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NormalizedHeartRateIntercept (const NormalizedHeartRateIntercept_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NormalizedHeartRateIntercept (const NormalizedHeartRateIntercept_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NormalizedHeartRateIntercept (::std::unique_ptr< NormalizedHeartRateIntercept_type > p);

          //@}

          /**
           * @name NormalizedHeartRateSympatheticSlope
           *
           * @brief Accessor and modifier functions for the %NormalizedHeartRateSympatheticSlope
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NormalizedHeartRateSympatheticSlope_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NormalizedHeartRateSympatheticSlope_type > NormalizedHeartRateSympatheticSlope_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NormalizedHeartRateSympatheticSlope_type, char > NormalizedHeartRateSympatheticSlope_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NormalizedHeartRateSympatheticSlope_optional&
          NormalizedHeartRateSympatheticSlope () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NormalizedHeartRateSympatheticSlope_optional&
          NormalizedHeartRateSympatheticSlope ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NormalizedHeartRateSympatheticSlope (const NormalizedHeartRateSympatheticSlope_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NormalizedHeartRateSympatheticSlope (const NormalizedHeartRateSympatheticSlope_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NormalizedHeartRateSympatheticSlope (::std::unique_ptr< NormalizedHeartRateSympatheticSlope_type > p);

          //@}

          /**
           * @name NormalizedHeartRateParasympatheticSlope
           *
           * @brief Accessor and modifier functions for the %NormalizedHeartRateParasympatheticSlope
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NormalizedHeartRateParasympatheticSlope_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NormalizedHeartRateParasympatheticSlope_type > NormalizedHeartRateParasympatheticSlope_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NormalizedHeartRateParasympatheticSlope_type, char > NormalizedHeartRateParasympatheticSlope_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NormalizedHeartRateParasympatheticSlope_optional&
          NormalizedHeartRateParasympatheticSlope () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NormalizedHeartRateParasympatheticSlope_optional&
          NormalizedHeartRateParasympatheticSlope ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NormalizedHeartRateParasympatheticSlope (const NormalizedHeartRateParasympatheticSlope_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NormalizedHeartRateParasympatheticSlope (const NormalizedHeartRateParasympatheticSlope_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NormalizedHeartRateParasympatheticSlope (::std::unique_ptr< NormalizedHeartRateParasympatheticSlope_type > p);

          //@}

          /**
           * @name NormalizedHeartElastanceIntercept
           *
           * @brief Accessor and modifier functions for the %NormalizedHeartElastanceIntercept
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NormalizedHeartElastanceIntercept_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NormalizedHeartElastanceIntercept_type > NormalizedHeartElastanceIntercept_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NormalizedHeartElastanceIntercept_type, char > NormalizedHeartElastanceIntercept_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NormalizedHeartElastanceIntercept_optional&
          NormalizedHeartElastanceIntercept () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NormalizedHeartElastanceIntercept_optional&
          NormalizedHeartElastanceIntercept ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NormalizedHeartElastanceIntercept (const NormalizedHeartElastanceIntercept_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NormalizedHeartElastanceIntercept (const NormalizedHeartElastanceIntercept_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NormalizedHeartElastanceIntercept (::std::unique_ptr< NormalizedHeartElastanceIntercept_type > p);

          //@}

          /**
           * @name NormalizedHeartElastanceSympatheticSlope
           *
           * @brief Accessor and modifier functions for the %NormalizedHeartElastanceSympatheticSlope
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NormalizedHeartElastanceSympatheticSlope_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NormalizedHeartElastanceSympatheticSlope_type > NormalizedHeartElastanceSympatheticSlope_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NormalizedHeartElastanceSympatheticSlope_type, char > NormalizedHeartElastanceSympatheticSlope_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NormalizedHeartElastanceSympatheticSlope_optional&
          NormalizedHeartElastanceSympatheticSlope () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NormalizedHeartElastanceSympatheticSlope_optional&
          NormalizedHeartElastanceSympatheticSlope ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NormalizedHeartElastanceSympatheticSlope (const NormalizedHeartElastanceSympatheticSlope_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NormalizedHeartElastanceSympatheticSlope (const NormalizedHeartElastanceSympatheticSlope_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NormalizedHeartElastanceSympatheticSlope (::std::unique_ptr< NormalizedHeartElastanceSympatheticSlope_type > p);

          //@}

          /**
           * @name NormalizedResistanceIntercept
           *
           * @brief Accessor and modifier functions for the %NormalizedResistanceIntercept
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NormalizedResistanceIntercept_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NormalizedResistanceIntercept_type > NormalizedResistanceIntercept_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NormalizedResistanceIntercept_type, char > NormalizedResistanceIntercept_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NormalizedResistanceIntercept_optional&
          NormalizedResistanceIntercept () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NormalizedResistanceIntercept_optional&
          NormalizedResistanceIntercept ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NormalizedResistanceIntercept (const NormalizedResistanceIntercept_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NormalizedResistanceIntercept (const NormalizedResistanceIntercept_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NormalizedResistanceIntercept (::std::unique_ptr< NormalizedResistanceIntercept_type > p);

          //@}

          /**
           * @name NormalizedResistanceSympatheticSlope
           *
           * @brief Accessor and modifier functions for the %NormalizedResistanceSympatheticSlope
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NormalizedResistanceSympatheticSlope_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NormalizedResistanceSympatheticSlope_type > NormalizedResistanceSympatheticSlope_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NormalizedResistanceSympatheticSlope_type, char > NormalizedResistanceSympatheticSlope_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NormalizedResistanceSympatheticSlope_optional&
          NormalizedResistanceSympatheticSlope () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NormalizedResistanceSympatheticSlope_optional&
          NormalizedResistanceSympatheticSlope ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NormalizedResistanceSympatheticSlope (const NormalizedResistanceSympatheticSlope_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NormalizedResistanceSympatheticSlope (const NormalizedResistanceSympatheticSlope_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NormalizedResistanceSympatheticSlope (::std::unique_ptr< NormalizedResistanceSympatheticSlope_type > p);

          //@}

          /**
           * @name NormalizedComplianceIntercept
           *
           * @brief Accessor and modifier functions for the %NormalizedComplianceIntercept
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NormalizedComplianceIntercept_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NormalizedComplianceIntercept_type > NormalizedComplianceIntercept_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NormalizedComplianceIntercept_type, char > NormalizedComplianceIntercept_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NormalizedComplianceIntercept_optional&
          NormalizedComplianceIntercept () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NormalizedComplianceIntercept_optional&
          NormalizedComplianceIntercept ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NormalizedComplianceIntercept (const NormalizedComplianceIntercept_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NormalizedComplianceIntercept (const NormalizedComplianceIntercept_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NormalizedComplianceIntercept (::std::unique_ptr< NormalizedComplianceIntercept_type > p);

          //@}

          /**
           * @name NormalizedComplianceParasympatheticSlope
           *
           * @brief Accessor and modifier functions for the %NormalizedComplianceParasympatheticSlope
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NormalizedComplianceParasympatheticSlope_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NormalizedComplianceParasympatheticSlope_type > NormalizedComplianceParasympatheticSlope_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NormalizedComplianceParasympatheticSlope_type, char > NormalizedComplianceParasympatheticSlope_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NormalizedComplianceParasympatheticSlope_optional&
          NormalizedComplianceParasympatheticSlope () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NormalizedComplianceParasympatheticSlope_optional&
          NormalizedComplianceParasympatheticSlope ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NormalizedComplianceParasympatheticSlope (const NormalizedComplianceParasympatheticSlope_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NormalizedComplianceParasympatheticSlope (const NormalizedComplianceParasympatheticSlope_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NormalizedComplianceParasympatheticSlope (::std::unique_ptr< NormalizedComplianceParasympatheticSlope_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BaroreceptorConfiguration ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BaroreceptorConfiguration (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BaroreceptorConfiguration (const BaroreceptorConfiguration& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BaroreceptorConfiguration*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BaroreceptorConfiguration&
          operator= (const BaroreceptorConfiguration& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BaroreceptorConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ResponseSlope_optional ResponseSlope_;
          HeartRateDistributedTimeDelay_optional HeartRateDistributedTimeDelay_;
          HeartElastanceDistributedTimeDelay_optional HeartElastanceDistributedTimeDelay_;
          SystemicResistanceDistributedTimeDelay_optional SystemicResistanceDistributedTimeDelay_;
          VenousComplianceDistributedTimeDelay_optional VenousComplianceDistributedTimeDelay_;
          NormalizedHeartRateIntercept_optional NormalizedHeartRateIntercept_;
          NormalizedHeartRateSympatheticSlope_optional NormalizedHeartRateSympatheticSlope_;
          NormalizedHeartRateParasympatheticSlope_optional NormalizedHeartRateParasympatheticSlope_;
          NormalizedHeartElastanceIntercept_optional NormalizedHeartElastanceIntercept_;
          NormalizedHeartElastanceSympatheticSlope_optional NormalizedHeartElastanceSympatheticSlope_;
          NormalizedResistanceIntercept_optional NormalizedResistanceIntercept_;
          NormalizedResistanceSympatheticSlope_optional NormalizedResistanceSympatheticSlope_;
          NormalizedComplianceIntercept_optional NormalizedComplianceIntercept_;
          NormalizedComplianceParasympatheticSlope_optional NormalizedComplianceParasympatheticSlope_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream&, const BaroreceptorConfiguration&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement&, const BaroreceptorConfiguration&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "decimal.hxx"

#include "double-parsing.hxx"
#include "decimal-parsing.hxx"

#include "double-serialization.hxx"
#include "decimal-serialization.hxx"
//
// End epilogue.

#endif // BARORECEPTOR_CONFIGURATION_HXX
