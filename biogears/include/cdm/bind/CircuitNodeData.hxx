// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from CircuitNodeData.xsd.
 */

#ifndef CIRCUIT_NODE_DATA_HXX
#define CIRCUIT_NODE_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "cdm-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class CircuitNodeData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ObjectData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarPressureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarTemperatureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarElectricPotentialData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarEnergyData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarElectricChargeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassPerMassData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFractionData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class CircuitNodeSubstanceQuantityData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %CircuitNodeData schema type.
         *
         * @nosubgrouping
         */
        class CircuitNodeData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name Name
           *
           * @brief Accessor and modifier functions for the %Name
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::id Name_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Name_optional&
          Name () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Name_optional&
          Name ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Name (const Name_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Name (const Name_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Name (::std::unique_ptr< Name_type > p);

          //@}

          /**
           * @name ResistanceEffectModifier
           *
           * @brief Accessor and modifier functions for the %ResistanceEffectModifier
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ResistanceEffectModifier_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ResistanceEffectModifier_type > ResistanceEffectModifier_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResistanceEffectModifier_type, char > ResistanceEffectModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ResistanceEffectModifier_optional&
          ResistanceEffectModifier () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ResistanceEffectModifier_optional&
          ResistanceEffectModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ResistanceEffectModifier (const ResistanceEffectModifier_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ResistanceEffectModifier (const ResistanceEffectModifier_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ResistanceEffectModifier (::std::unique_ptr< ResistanceEffectModifier_type > p);

          //@}

          /**
           * @name Pressure
           *
           * @brief Accessor and modifier functions for the %Pressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData Pressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Pressure_type > Pressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Pressure_type, char > Pressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Pressure_optional&
          Pressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Pressure_optional&
          Pressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Pressure (const Pressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Pressure (const Pressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Pressure (::std::unique_ptr< Pressure_type > p);

          //@}

          /**
           * @name NextPressure
           *
           * @brief Accessor and modifier functions for the %NextPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData NextPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextPressure_type > NextPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextPressure_type, char > NextPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextPressure_optional&
          NextPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextPressure_optional&
          NextPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextPressure (const NextPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextPressure (const NextPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextPressure (::std::unique_ptr< NextPressure_type > p);

          //@}

          /**
           * @name Temperature
           *
           * @brief Accessor and modifier functions for the %Temperature
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData Temperature_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Temperature_type > Temperature_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Temperature_type, char > Temperature_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Temperature_optional&
          Temperature () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Temperature_optional&
          Temperature ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Temperature (const Temperature_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Temperature (const Temperature_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Temperature (::std::unique_ptr< Temperature_type > p);

          //@}

          /**
           * @name NextTemperature
           *
           * @brief Accessor and modifier functions for the %NextTemperature
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData NextTemperature_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextTemperature_type > NextTemperature_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextTemperature_type, char > NextTemperature_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextTemperature_optional&
          NextTemperature () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextTemperature_optional&
          NextTemperature ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextTemperature (const NextTemperature_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextTemperature (const NextTemperature_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextTemperature (::std::unique_ptr< NextTemperature_type > p);

          //@}

          /**
           * @name Voltage
           *
           * @brief Accessor and modifier functions for the %Voltage
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricPotentialData Voltage_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Voltage_type > Voltage_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Voltage_type, char > Voltage_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Voltage_optional&
          Voltage () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Voltage_optional&
          Voltage ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Voltage (const Voltage_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Voltage (const Voltage_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Voltage (::std::unique_ptr< Voltage_type > p);

          //@}

          /**
           * @name NextVoltage
           *
           * @brief Accessor and modifier functions for the %NextVoltage
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricPotentialData NextVoltage_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextVoltage_type > NextVoltage_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextVoltage_type, char > NextVoltage_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextVoltage_optional&
          NextVoltage () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextVoltage_optional&
          NextVoltage ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextVoltage (const NextVoltage_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextVoltage (const NextVoltage_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextVoltage (::std::unique_ptr< NextVoltage_type > p);

          //@}

          /**
           * @name Volume
           *
           * @brief Accessor and modifier functions for the %Volume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData Volume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Volume_type > Volume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Volume_type, char > Volume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Volume_optional&
          Volume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Volume_optional&
          Volume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Volume (const Volume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Volume (const Volume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Volume (::std::unique_ptr< Volume_type > p);

          //@}

          /**
           * @name NextVolume
           *
           * @brief Accessor and modifier functions for the %NextVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData NextVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextVolume_type > NextVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextVolume_type, char > NextVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextVolume_optional&
          NextVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextVolume_optional&
          NextVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextVolume (const NextVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextVolume (const NextVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextVolume (::std::unique_ptr< NextVolume_type > p);

          //@}

          /**
           * @name VolumeBaseline
           *
           * @brief Accessor and modifier functions for the %VolumeBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData VolumeBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VolumeBaseline_type > VolumeBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VolumeBaseline_type, char > VolumeBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VolumeBaseline_optional&
          VolumeBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VolumeBaseline_optional&
          VolumeBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VolumeBaseline (const VolumeBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VolumeBaseline (const VolumeBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VolumeBaseline (::std::unique_ptr< VolumeBaseline_type > p);

          //@}

          /**
           * @name UnstressedVolume
           *
           * @brief Accessor and modifier functions for the %UnstressedVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData UnstressedVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UnstressedVolume_type > UnstressedVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UnstressedVolume_type, char > UnstressedVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UnstressedVolume_optional&
          UnstressedVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UnstressedVolume_optional&
          UnstressedVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UnstressedVolume (const UnstressedVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UnstressedVolume (const UnstressedVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UnstressedVolume (::std::unique_ptr< UnstressedVolume_type > p);

          //@}

          /**
           * @name Heat
           *
           * @brief Accessor and modifier functions for the %Heat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarEnergyData Heat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Heat_type > Heat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Heat_type, char > Heat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Heat_optional&
          Heat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Heat_optional&
          Heat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Heat (const Heat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Heat (const Heat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Heat (::std::unique_ptr< Heat_type > p);

          //@}

          /**
           * @name NextHeat
           *
           * @brief Accessor and modifier functions for the %NextHeat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarEnergyData NextHeat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextHeat_type > NextHeat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextHeat_type, char > NextHeat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextHeat_optional&
          NextHeat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextHeat_optional&
          NextHeat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextHeat (const NextHeat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextHeat (const NextHeat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextHeat (::std::unique_ptr< NextHeat_type > p);

          //@}

          /**
           * @name HeatBaseline
           *
           * @brief Accessor and modifier functions for the %HeatBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarEnergyData HeatBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeatBaseline_type > HeatBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatBaseline_type, char > HeatBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeatBaseline_optional&
          HeatBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeatBaseline_optional&
          HeatBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatBaseline (const HeatBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeatBaseline (const HeatBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeatBaseline (::std::unique_ptr< HeatBaseline_type > p);

          //@}

          /**
           * @name ElectricCharge
           *
           * @brief Accessor and modifier functions for the %ElectricCharge
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricChargeData ElectricCharge_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectricCharge_type > ElectricCharge_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricCharge_type, char > ElectricCharge_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectricCharge_optional&
          ElectricCharge () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectricCharge_optional&
          ElectricCharge ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricCharge (const ElectricCharge_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectricCharge (const ElectricCharge_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectricCharge (::std::unique_ptr< ElectricCharge_type > p);

          //@}

          /**
           * @name NextElectricCharge
           *
           * @brief Accessor and modifier functions for the %NextElectricCharge
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricChargeData NextElectricCharge_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextElectricCharge_type > NextElectricCharge_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextElectricCharge_type, char > NextElectricCharge_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextElectricCharge_optional&
          NextElectricCharge () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextElectricCharge_optional&
          NextElectricCharge ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextElectricCharge (const NextElectricCharge_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextElectricCharge (const NextElectricCharge_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextElectricCharge (::std::unique_ptr< NextElectricCharge_type > p);

          //@}

          /**
           * @name ElectricChargeBaseline
           *
           * @brief Accessor and modifier functions for the %ElectricChargeBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricChargeData ElectricChargeBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectricChargeBaseline_type > ElectricChargeBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricChargeBaseline_type, char > ElectricChargeBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectricChargeBaseline_optional&
          ElectricChargeBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectricChargeBaseline_optional&
          ElectricChargeBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricChargeBaseline (const ElectricChargeBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectricChargeBaseline (const ElectricChargeBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectricChargeBaseline (::std::unique_ptr< ElectricChargeBaseline_type > p);

          //@}

          /**
           * @name TissueConcentrationAcidicPhospohlipids
           *
           * @brief Accessor and modifier functions for the %TissueConcentrationAcidicPhospohlipids
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerMassData TissueConcentrationAcidicPhospohlipids_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TissueConcentrationAcidicPhospohlipids_type > TissueConcentrationAcidicPhospohlipids_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TissueConcentrationAcidicPhospohlipids_type, char > TissueConcentrationAcidicPhospohlipids_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TissueConcentrationAcidicPhospohlipids_optional&
          TissueConcentrationAcidicPhospohlipids () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TissueConcentrationAcidicPhospohlipids_optional&
          TissueConcentrationAcidicPhospohlipids ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TissueConcentrationAcidicPhospohlipids (const TissueConcentrationAcidicPhospohlipids_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TissueConcentrationAcidicPhospohlipids (const TissueConcentrationAcidicPhospohlipids_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TissueConcentrationAcidicPhospohlipids (::std::unique_ptr< TissueConcentrationAcidicPhospohlipids_type > p);

          //@}

          /**
           * @name TissueToPlasmaAlbuminRatio
           *
           * @brief Accessor and modifier functions for the %TissueToPlasmaAlbuminRatio
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData TissueToPlasmaAlbuminRatio_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TissueToPlasmaAlbuminRatio_type > TissueToPlasmaAlbuminRatio_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TissueToPlasmaAlbuminRatio_type, char > TissueToPlasmaAlbuminRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TissueToPlasmaAlbuminRatio_optional&
          TissueToPlasmaAlbuminRatio () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TissueToPlasmaAlbuminRatio_optional&
          TissueToPlasmaAlbuminRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TissueToPlasmaAlbuminRatio (const TissueToPlasmaAlbuminRatio_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TissueToPlasmaAlbuminRatio (const TissueToPlasmaAlbuminRatio_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TissueToPlasmaAlbuminRatio (::std::unique_ptr< TissueToPlasmaAlbuminRatio_type > p);

          //@}

          /**
           * @name TissueToPlasmaLipoproteinRatio
           *
           * @brief Accessor and modifier functions for the %TissueToPlasmaLipoproteinRatio
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData TissueToPlasmaLipoproteinRatio_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TissueToPlasmaLipoproteinRatio_type > TissueToPlasmaLipoproteinRatio_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TissueToPlasmaLipoproteinRatio_type, char > TissueToPlasmaLipoproteinRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TissueToPlasmaLipoproteinRatio_optional&
          TissueToPlasmaLipoproteinRatio () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TissueToPlasmaLipoproteinRatio_optional&
          TissueToPlasmaLipoproteinRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TissueToPlasmaLipoproteinRatio (const TissueToPlasmaLipoproteinRatio_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TissueToPlasmaLipoproteinRatio (const TissueToPlasmaLipoproteinRatio_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TissueToPlasmaLipoproteinRatio (::std::unique_ptr< TissueToPlasmaLipoproteinRatio_type > p);

          //@}

          /**
           * @name TissueToPlasmaAAGRatio
           *
           * @brief Accessor and modifier functions for the %TissueToPlasmaAAGRatio
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData TissueToPlasmaAAGRatio_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TissueToPlasmaAAGRatio_type > TissueToPlasmaAAGRatio_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TissueToPlasmaAAGRatio_type, char > TissueToPlasmaAAGRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TissueToPlasmaAAGRatio_optional&
          TissueToPlasmaAAGRatio () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TissueToPlasmaAAGRatio_optional&
          TissueToPlasmaAAGRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TissueToPlasmaAAGRatio (const TissueToPlasmaAAGRatio_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TissueToPlasmaAAGRatio (const TissueToPlasmaAAGRatio_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TissueToPlasmaAAGRatio (::std::unique_ptr< TissueToPlasmaAAGRatio_type > p);

          //@}

          /**
           * @name VolumeFractionExtracellularWater
           *
           * @brief Accessor and modifier functions for the %VolumeFractionExtracellularWater
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData VolumeFractionExtracellularWater_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VolumeFractionExtracellularWater_type > VolumeFractionExtracellularWater_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VolumeFractionExtracellularWater_type, char > VolumeFractionExtracellularWater_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VolumeFractionExtracellularWater_optional&
          VolumeFractionExtracellularWater () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VolumeFractionExtracellularWater_optional&
          VolumeFractionExtracellularWater ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VolumeFractionExtracellularWater (const VolumeFractionExtracellularWater_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VolumeFractionExtracellularWater (const VolumeFractionExtracellularWater_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VolumeFractionExtracellularWater (::std::unique_ptr< VolumeFractionExtracellularWater_type > p);

          //@}

          /**
           * @name VolumeFractionIntracellularWater
           *
           * @brief Accessor and modifier functions for the %VolumeFractionIntracellularWater
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData VolumeFractionIntracellularWater_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VolumeFractionIntracellularWater_type > VolumeFractionIntracellularWater_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VolumeFractionIntracellularWater_type, char > VolumeFractionIntracellularWater_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VolumeFractionIntracellularWater_optional&
          VolumeFractionIntracellularWater () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VolumeFractionIntracellularWater_optional&
          VolumeFractionIntracellularWater ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VolumeFractionIntracellularWater (const VolumeFractionIntracellularWater_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VolumeFractionIntracellularWater (const VolumeFractionIntracellularWater_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VolumeFractionIntracellularWater (::std::unique_ptr< VolumeFractionIntracellularWater_type > p);

          //@}

          /**
           * @name VolumeFractionNeutralLipids
           *
           * @brief Accessor and modifier functions for the %VolumeFractionNeutralLipids
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData VolumeFractionNeutralLipids_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VolumeFractionNeutralLipids_type > VolumeFractionNeutralLipids_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VolumeFractionNeutralLipids_type, char > VolumeFractionNeutralLipids_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VolumeFractionNeutralLipids_optional&
          VolumeFractionNeutralLipids () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VolumeFractionNeutralLipids_optional&
          VolumeFractionNeutralLipids ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VolumeFractionNeutralLipids (const VolumeFractionNeutralLipids_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VolumeFractionNeutralLipids (const VolumeFractionNeutralLipids_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VolumeFractionNeutralLipids (::std::unique_ptr< VolumeFractionNeutralLipids_type > p);

          //@}

          /**
           * @name VolumeFractionNeutralPhospholipids
           *
           * @brief Accessor and modifier functions for the %VolumeFractionNeutralPhospholipids
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData VolumeFractionNeutralPhospholipids_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VolumeFractionNeutralPhospholipids_type > VolumeFractionNeutralPhospholipids_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VolumeFractionNeutralPhospholipids_type, char > VolumeFractionNeutralPhospholipids_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VolumeFractionNeutralPhospholipids_optional&
          VolumeFractionNeutralPhospholipids () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VolumeFractionNeutralPhospholipids_optional&
          VolumeFractionNeutralPhospholipids ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VolumeFractionNeutralPhospholipids (const VolumeFractionNeutralPhospholipids_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VolumeFractionNeutralPhospholipids (const VolumeFractionNeutralPhospholipids_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VolumeFractionNeutralPhospholipids (::std::unique_ptr< VolumeFractionNeutralPhospholipids_type > p);

          //@}

          /**
           * @name SubstanceQuantity
           *
           * @brief Accessor and modifier functions for the %SubstanceQuantity
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::CircuitNodeSubstanceQuantityData SubstanceQuantity_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< SubstanceQuantity_type > SubstanceQuantity_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef SubstanceQuantity_sequence::iterator SubstanceQuantity_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef SubstanceQuantity_sequence::const_iterator SubstanceQuantity_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SubstanceQuantity_type, char > SubstanceQuantity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const SubstanceQuantity_sequence&
          SubstanceQuantity () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          SubstanceQuantity_sequence&
          SubstanceQuantity ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          SubstanceQuantity (const SubstanceQuantity_sequence& s);

          //@}

          /**
           * @name IsInterConnectedNode
           *
           * @brief Accessor and modifier functions for the %IsInterConnectedNode
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::boolean IsInterConnectedNode_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< IsInterConnectedNode_type, char > IsInterConnectedNode_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const IsInterConnectedNode_type&
          IsInterConnectedNode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          IsInterConnectedNode_type&
          IsInterConnectedNode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          IsInterConnectedNode (const IsInterConnectedNode_type& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static IsInterConnectedNode_type
          IsInterConnectedNode_default_value ();

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CircuitNodeData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CircuitNodeData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CircuitNodeData (const CircuitNodeData& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CircuitNodeData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CircuitNodeData&
          operator= (const CircuitNodeData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CircuitNodeData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          Name_optional Name_;
          ResistanceEffectModifier_optional ResistanceEffectModifier_;
          Pressure_optional Pressure_;
          NextPressure_optional NextPressure_;
          Temperature_optional Temperature_;
          NextTemperature_optional NextTemperature_;
          Voltage_optional Voltage_;
          NextVoltage_optional NextVoltage_;
          Volume_optional Volume_;
          NextVolume_optional NextVolume_;
          VolumeBaseline_optional VolumeBaseline_;
          UnstressedVolume_optional UnstressedVolume_;
          Heat_optional Heat_;
          NextHeat_optional NextHeat_;
          HeatBaseline_optional HeatBaseline_;
          ElectricCharge_optional ElectricCharge_;
          NextElectricCharge_optional NextElectricCharge_;
          ElectricChargeBaseline_optional ElectricChargeBaseline_;
          TissueConcentrationAcidicPhospohlipids_optional TissueConcentrationAcidicPhospohlipids_;
          TissueToPlasmaAlbuminRatio_optional TissueToPlasmaAlbuminRatio_;
          TissueToPlasmaLipoproteinRatio_optional TissueToPlasmaLipoproteinRatio_;
          TissueToPlasmaAAGRatio_optional TissueToPlasmaAAGRatio_;
          VolumeFractionExtracellularWater_optional VolumeFractionExtracellularWater_;
          VolumeFractionIntracellularWater_optional VolumeFractionIntracellularWater_;
          VolumeFractionNeutralLipids_optional VolumeFractionNeutralLipids_;
          VolumeFractionNeutralPhospholipids_optional VolumeFractionNeutralPhospholipids_;
          SubstanceQuantity_sequence SubstanceQuantity_;
          ::xsd::cxx::tree::one< IsInterConnectedNode_type > IsInterConnectedNode_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream&, const CircuitNodeData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement&, const CircuitNodeData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "decimal.hxx"

#include "double-parsing.hxx"
#include "decimal-parsing.hxx"

#include "double-serialization.hxx"
#include "decimal-serialization.hxx"
//
// End epilogue.

#endif // CIRCUIT_NODE_DATA_HXX
