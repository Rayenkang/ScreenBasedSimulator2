// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from CircuitPathData.xsd.
 */

#ifndef CIRCUIT_PATH_DATA_HXX
#define CIRCUIT_PATH_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "cdm-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class CircuitPathData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ObjectData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class enumOpenClosed;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFlowResistanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarHeatResistanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarElectricResistanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFlowComplianceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarHeatCapacitanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarElectricCapacitanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFlowInertanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarHeatInductanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarElectricInductanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumePerTimeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarPowerData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarElectricCurrentData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarPressureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarTemperatureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarElectricPotentialData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarEnergyData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarElectricChargeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %CircuitPathData schema type.
         *
         * @nosubgrouping
         */
        class CircuitPathData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name Name
           *
           * @brief Accessor and modifier functions for the %Name
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::id Name_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Name_optional&
          Name () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Name_optional&
          Name ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Name (const Name_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Name (const Name_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Name (::std::unique_ptr< Name_type > p);

          //@}

          /**
           * @name SourceNode
           *
           * @brief Accessor and modifier functions for the %SourceNode
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::idref SourceNode_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SourceNode_type, char > SourceNode_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SourceNode_type&
          SourceNode () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SourceNode_type&
          SourceNode ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SourceNode (const SourceNode_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          SourceNode (::std::unique_ptr< SourceNode_type > p);

          //@}

          /**
           * @name TargetNode
           *
           * @brief Accessor and modifier functions for the %TargetNode
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::idref TargetNode_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TargetNode_type, char > TargetNode_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TargetNode_type&
          TargetNode () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TargetNode_type&
          TargetNode ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TargetNode (const TargetNode_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          TargetNode (::std::unique_ptr< TargetNode_type > p);

          //@}

          /**
           * @name Switch
           *
           * @brief Accessor and modifier functions for the %Switch
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOpenClosed Switch_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Switch_type > Switch_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Switch_type, char > Switch_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Switch_optional&
          Switch () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Switch_optional&
          Switch ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Switch (const Switch_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Switch (const Switch_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Switch (::std::unique_ptr< Switch_type > p);

          //@}

          /**
           * @name NextSwitch
           *
           * @brief Accessor and modifier functions for the %NextSwitch
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOpenClosed NextSwitch_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextSwitch_type > NextSwitch_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextSwitch_type, char > NextSwitch_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextSwitch_optional&
          NextSwitch () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextSwitch_optional&
          NextSwitch ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextSwitch (const NextSwitch_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextSwitch (const NextSwitch_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextSwitch (::std::unique_ptr< NextSwitch_type > p);

          //@}

          /**
           * @name Valve
           *
           * @brief Accessor and modifier functions for the %Valve
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOpenClosed Valve_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Valve_type > Valve_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Valve_type, char > Valve_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Valve_optional&
          Valve () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Valve_optional&
          Valve ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Valve (const Valve_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Valve (const Valve_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Valve (::std::unique_ptr< Valve_type > p);

          //@}

          /**
           * @name NextValve
           *
           * @brief Accessor and modifier functions for the %NextValve
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOpenClosed NextValve_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextValve_type > NextValve_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextValve_type, char > NextValve_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextValve_optional&
          NextValve () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextValve_optional&
          NextValve ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextValve (const NextValve_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextValve (const NextValve_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextValve (::std::unique_ptr< NextValve_type > p);

          //@}

          /**
           * @name FlowResistance
           *
           * @brief Accessor and modifier functions for the %FlowResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData FlowResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FlowResistance_type > FlowResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FlowResistance_type, char > FlowResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FlowResistance_optional&
          FlowResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FlowResistance_optional&
          FlowResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FlowResistance (const FlowResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FlowResistance (const FlowResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FlowResistance (::std::unique_ptr< FlowResistance_type > p);

          //@}

          /**
           * @name NextFlowResistance
           *
           * @brief Accessor and modifier functions for the %NextFlowResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData NextFlowResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextFlowResistance_type > NextFlowResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextFlowResistance_type, char > NextFlowResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextFlowResistance_optional&
          NextFlowResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextFlowResistance_optional&
          NextFlowResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextFlowResistance (const NextFlowResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextFlowResistance (const NextFlowResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextFlowResistance (::std::unique_ptr< NextFlowResistance_type > p);

          //@}

          /**
           * @name FlowResistanceBaseline
           *
           * @brief Accessor and modifier functions for the %FlowResistanceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData FlowResistanceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FlowResistanceBaseline_type > FlowResistanceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FlowResistanceBaseline_type, char > FlowResistanceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FlowResistanceBaseline_optional&
          FlowResistanceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FlowResistanceBaseline_optional&
          FlowResistanceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FlowResistanceBaseline (const FlowResistanceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FlowResistanceBaseline (const FlowResistanceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FlowResistanceBaseline (::std::unique_ptr< FlowResistanceBaseline_type > p);

          //@}

          /**
           * @name HeatResistance
           *
           * @brief Accessor and modifier functions for the %HeatResistance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatResistanceData HeatResistance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatResistance_type, char > HeatResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeatResistance_type&
          HeatResistance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeatResistance_type&
          HeatResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatResistance (const HeatResistance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          HeatResistance (::std::unique_ptr< HeatResistance_type > p);

          //@}

          /**
           * @name NextHeatResistance
           *
           * @brief Accessor and modifier functions for the %NextHeatResistance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatResistanceData NextHeatResistance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextHeatResistance_type, char > NextHeatResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NextHeatResistance_type&
          NextHeatResistance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NextHeatResistance_type&
          NextHeatResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextHeatResistance (const NextHeatResistance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          NextHeatResistance (::std::unique_ptr< NextHeatResistance_type > p);

          //@}

          /**
           * @name HeatResistanceBaseline
           *
           * @brief Accessor and modifier functions for the %HeatResistanceBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatResistanceData HeatResistanceBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatResistanceBaseline_type, char > HeatResistanceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeatResistanceBaseline_type&
          HeatResistanceBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeatResistanceBaseline_type&
          HeatResistanceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatResistanceBaseline (const HeatResistanceBaseline_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          HeatResistanceBaseline (::std::unique_ptr< HeatResistanceBaseline_type > p);

          //@}

          /**
           * @name ElectricResistance
           *
           * @brief Accessor and modifier functions for the %ElectricResistance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricResistanceData ElectricResistance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricResistance_type, char > ElectricResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElectricResistance_type&
          ElectricResistance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElectricResistance_type&
          ElectricResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricResistance (const ElectricResistance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ElectricResistance (::std::unique_ptr< ElectricResistance_type > p);

          //@}

          /**
           * @name NextElectricResistance
           *
           * @brief Accessor and modifier functions for the %NextElectricResistance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricResistanceData NextElectricResistance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextElectricResistance_type, char > NextElectricResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NextElectricResistance_type&
          NextElectricResistance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NextElectricResistance_type&
          NextElectricResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextElectricResistance (const NextElectricResistance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          NextElectricResistance (::std::unique_ptr< NextElectricResistance_type > p);

          //@}

          /**
           * @name ElectricResistanceBaseline
           *
           * @brief Accessor and modifier functions for the %ElectricResistanceBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricResistanceData ElectricResistanceBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricResistanceBaseline_type, char > ElectricResistanceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElectricResistanceBaseline_type&
          ElectricResistanceBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElectricResistanceBaseline_type&
          ElectricResistanceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricResistanceBaseline (const ElectricResistanceBaseline_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ElectricResistanceBaseline (::std::unique_ptr< ElectricResistanceBaseline_type > p);

          //@}

          /**
           * @name FlowCompliance
           *
           * @brief Accessor and modifier functions for the %FlowCompliance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowComplianceData FlowCompliance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FlowCompliance_type > FlowCompliance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FlowCompliance_type, char > FlowCompliance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FlowCompliance_optional&
          FlowCompliance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FlowCompliance_optional&
          FlowCompliance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FlowCompliance (const FlowCompliance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FlowCompliance (const FlowCompliance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FlowCompliance (::std::unique_ptr< FlowCompliance_type > p);

          //@}

          /**
           * @name NextFlowCompliance
           *
           * @brief Accessor and modifier functions for the %NextFlowCompliance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowComplianceData NextFlowCompliance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextFlowCompliance_type > NextFlowCompliance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextFlowCompliance_type, char > NextFlowCompliance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextFlowCompliance_optional&
          NextFlowCompliance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextFlowCompliance_optional&
          NextFlowCompliance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextFlowCompliance (const NextFlowCompliance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextFlowCompliance (const NextFlowCompliance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextFlowCompliance (::std::unique_ptr< NextFlowCompliance_type > p);

          //@}

          /**
           * @name FlowComplianceBaseline
           *
           * @brief Accessor and modifier functions for the %FlowComplianceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowComplianceData FlowComplianceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FlowComplianceBaseline_type > FlowComplianceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FlowComplianceBaseline_type, char > FlowComplianceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FlowComplianceBaseline_optional&
          FlowComplianceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FlowComplianceBaseline_optional&
          FlowComplianceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FlowComplianceBaseline (const FlowComplianceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FlowComplianceBaseline (const FlowComplianceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FlowComplianceBaseline (::std::unique_ptr< FlowComplianceBaseline_type > p);

          //@}

          /**
           * @name HeatCapacitance
           *
           * @brief Accessor and modifier functions for the %HeatCapacitance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatCapacitanceData HeatCapacitance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeatCapacitance_type > HeatCapacitance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatCapacitance_type, char > HeatCapacitance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeatCapacitance_optional&
          HeatCapacitance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeatCapacitance_optional&
          HeatCapacitance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatCapacitance (const HeatCapacitance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeatCapacitance (const HeatCapacitance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeatCapacitance (::std::unique_ptr< HeatCapacitance_type > p);

          //@}

          /**
           * @name NextHeatCapacitance
           *
           * @brief Accessor and modifier functions for the %NextHeatCapacitance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatCapacitanceData NextHeatCapacitance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextHeatCapacitance_type > NextHeatCapacitance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextHeatCapacitance_type, char > NextHeatCapacitance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextHeatCapacitance_optional&
          NextHeatCapacitance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextHeatCapacitance_optional&
          NextHeatCapacitance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextHeatCapacitance (const NextHeatCapacitance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextHeatCapacitance (const NextHeatCapacitance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextHeatCapacitance (::std::unique_ptr< NextHeatCapacitance_type > p);

          //@}

          /**
           * @name HeatCapacitanceBaseline
           *
           * @brief Accessor and modifier functions for the %HeatCapacitanceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatCapacitanceData HeatCapacitanceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeatCapacitanceBaseline_type > HeatCapacitanceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatCapacitanceBaseline_type, char > HeatCapacitanceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeatCapacitanceBaseline_optional&
          HeatCapacitanceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeatCapacitanceBaseline_optional&
          HeatCapacitanceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatCapacitanceBaseline (const HeatCapacitanceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeatCapacitanceBaseline (const HeatCapacitanceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeatCapacitanceBaseline (::std::unique_ptr< HeatCapacitanceBaseline_type > p);

          //@}

          /**
           * @name ElectricCapacitance
           *
           * @brief Accessor and modifier functions for the %ElectricCapacitance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricCapacitanceData ElectricCapacitance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectricCapacitance_type > ElectricCapacitance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricCapacitance_type, char > ElectricCapacitance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectricCapacitance_optional&
          ElectricCapacitance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectricCapacitance_optional&
          ElectricCapacitance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricCapacitance (const ElectricCapacitance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectricCapacitance (const ElectricCapacitance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectricCapacitance (::std::unique_ptr< ElectricCapacitance_type > p);

          //@}

          /**
           * @name NextElectricCapacitance
           *
           * @brief Accessor and modifier functions for the %NextElectricCapacitance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricCapacitanceData NextElectricCapacitance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextElectricCapacitance_type > NextElectricCapacitance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextElectricCapacitance_type, char > NextElectricCapacitance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextElectricCapacitance_optional&
          NextElectricCapacitance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextElectricCapacitance_optional&
          NextElectricCapacitance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextElectricCapacitance (const NextElectricCapacitance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextElectricCapacitance (const NextElectricCapacitance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextElectricCapacitance (::std::unique_ptr< NextElectricCapacitance_type > p);

          //@}

          /**
           * @name ElectricCapacitanceBaseline
           *
           * @brief Accessor and modifier functions for the %ElectricCapacitanceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricCapacitanceData ElectricCapacitanceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectricCapacitanceBaseline_type > ElectricCapacitanceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricCapacitanceBaseline_type, char > ElectricCapacitanceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectricCapacitanceBaseline_optional&
          ElectricCapacitanceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectricCapacitanceBaseline_optional&
          ElectricCapacitanceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricCapacitanceBaseline (const ElectricCapacitanceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectricCapacitanceBaseline (const ElectricCapacitanceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectricCapacitanceBaseline (::std::unique_ptr< ElectricCapacitanceBaseline_type > p);

          //@}

          /**
           * @name FlowInertance
           *
           * @brief Accessor and modifier functions for the %FlowInertance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowInertanceData FlowInertance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FlowInertance_type > FlowInertance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FlowInertance_type, char > FlowInertance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FlowInertance_optional&
          FlowInertance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FlowInertance_optional&
          FlowInertance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FlowInertance (const FlowInertance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FlowInertance (const FlowInertance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FlowInertance (::std::unique_ptr< FlowInertance_type > p);

          //@}

          /**
           * @name NextFlowInertance
           *
           * @brief Accessor and modifier functions for the %NextFlowInertance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowInertanceData NextFlowInertance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextFlowInertance_type > NextFlowInertance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextFlowInertance_type, char > NextFlowInertance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextFlowInertance_optional&
          NextFlowInertance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextFlowInertance_optional&
          NextFlowInertance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextFlowInertance (const NextFlowInertance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextFlowInertance (const NextFlowInertance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextFlowInertance (::std::unique_ptr< NextFlowInertance_type > p);

          //@}

          /**
           * @name FlowInertanceBaseline
           *
           * @brief Accessor and modifier functions for the %FlowInertanceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowInertanceData FlowInertanceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FlowInertanceBaseline_type > FlowInertanceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FlowInertanceBaseline_type, char > FlowInertanceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FlowInertanceBaseline_optional&
          FlowInertanceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FlowInertanceBaseline_optional&
          FlowInertanceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FlowInertanceBaseline (const FlowInertanceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FlowInertanceBaseline (const FlowInertanceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FlowInertanceBaseline (::std::unique_ptr< FlowInertanceBaseline_type > p);

          //@}

          /**
           * @name HeatInductance
           *
           * @brief Accessor and modifier functions for the %HeatInductance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatInductanceData HeatInductance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeatInductance_type > HeatInductance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatInductance_type, char > HeatInductance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeatInductance_optional&
          HeatInductance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeatInductance_optional&
          HeatInductance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatInductance (const HeatInductance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeatInductance (const HeatInductance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeatInductance (::std::unique_ptr< HeatInductance_type > p);

          //@}

          /**
           * @name NextHeatInductance
           *
           * @brief Accessor and modifier functions for the %NextHeatInductance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatInductanceData NextHeatInductance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextHeatInductance_type > NextHeatInductance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextHeatInductance_type, char > NextHeatInductance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextHeatInductance_optional&
          NextHeatInductance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextHeatInductance_optional&
          NextHeatInductance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextHeatInductance (const NextHeatInductance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextHeatInductance (const NextHeatInductance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextHeatInductance (::std::unique_ptr< NextHeatInductance_type > p);

          //@}

          /**
           * @name HeatInductanceBaseline
           *
           * @brief Accessor and modifier functions for the %HeatInductanceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatInductanceData HeatInductanceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeatInductanceBaseline_type > HeatInductanceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatInductanceBaseline_type, char > HeatInductanceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeatInductanceBaseline_optional&
          HeatInductanceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeatInductanceBaseline_optional&
          HeatInductanceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatInductanceBaseline (const HeatInductanceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeatInductanceBaseline (const HeatInductanceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeatInductanceBaseline (::std::unique_ptr< HeatInductanceBaseline_type > p);

          //@}

          /**
           * @name ElectricInductance
           *
           * @brief Accessor and modifier functions for the %ElectricInductance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricInductanceData ElectricInductance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectricInductance_type > ElectricInductance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricInductance_type, char > ElectricInductance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectricInductance_optional&
          ElectricInductance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectricInductance_optional&
          ElectricInductance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricInductance (const ElectricInductance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectricInductance (const ElectricInductance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectricInductance (::std::unique_ptr< ElectricInductance_type > p);

          //@}

          /**
           * @name NextElectricInductance
           *
           * @brief Accessor and modifier functions for the %NextElectricInductance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricInductanceData NextElectricInductance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextElectricInductance_type > NextElectricInductance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextElectricInductance_type, char > NextElectricInductance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextElectricInductance_optional&
          NextElectricInductance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextElectricInductance_optional&
          NextElectricInductance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextElectricInductance (const NextElectricInductance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextElectricInductance (const NextElectricInductance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextElectricInductance (::std::unique_ptr< NextElectricInductance_type > p);

          //@}

          /**
           * @name ElectricInductanceBaseline
           *
           * @brief Accessor and modifier functions for the %ElectricInductanceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricInductanceData ElectricInductanceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectricInductanceBaseline_type > ElectricInductanceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricInductanceBaseline_type, char > ElectricInductanceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectricInductanceBaseline_optional&
          ElectricInductanceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectricInductanceBaseline_optional&
          ElectricInductanceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricInductanceBaseline (const ElectricInductanceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectricInductanceBaseline (const ElectricInductanceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectricInductanceBaseline (::std::unique_ptr< ElectricInductanceBaseline_type > p);

          //@}

          /**
           * @name Flow
           *
           * @brief Accessor and modifier functions for the %Flow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData Flow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Flow_type > Flow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Flow_type, char > Flow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Flow_optional&
          Flow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Flow_optional&
          Flow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Flow (const Flow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Flow (const Flow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Flow (::std::unique_ptr< Flow_type > p);

          //@}

          /**
           * @name NextFlow
           *
           * @brief Accessor and modifier functions for the %NextFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData NextFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextFlow_type > NextFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextFlow_type, char > NextFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextFlow_optional&
          NextFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextFlow_optional&
          NextFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextFlow (const NextFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextFlow (const NextFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextFlow (::std::unique_ptr< NextFlow_type > p);

          //@}

          /**
           * @name FlowBaseline
           *
           * @brief Accessor and modifier functions for the %FlowBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData FlowBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FlowBaseline_type > FlowBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FlowBaseline_type, char > FlowBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FlowBaseline_optional&
          FlowBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FlowBaseline_optional&
          FlowBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FlowBaseline (const FlowBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FlowBaseline (const FlowBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FlowBaseline (::std::unique_ptr< FlowBaseline_type > p);

          //@}

          /**
           * @name FlowSource
           *
           * @brief Accessor and modifier functions for the %FlowSource
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData FlowSource_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FlowSource_type > FlowSource_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FlowSource_type, char > FlowSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FlowSource_optional&
          FlowSource () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FlowSource_optional&
          FlowSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FlowSource (const FlowSource_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FlowSource (const FlowSource_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FlowSource (::std::unique_ptr< FlowSource_type > p);

          //@}

          /**
           * @name NextFlowSource
           *
           * @brief Accessor and modifier functions for the %NextFlowSource
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData NextFlowSource_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextFlowSource_type > NextFlowSource_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextFlowSource_type, char > NextFlowSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextFlowSource_optional&
          NextFlowSource () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextFlowSource_optional&
          NextFlowSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextFlowSource (const NextFlowSource_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextFlowSource (const NextFlowSource_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextFlowSource (::std::unique_ptr< NextFlowSource_type > p);

          //@}

          /**
           * @name FlowSourceBaseline
           *
           * @brief Accessor and modifier functions for the %FlowSourceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData FlowSourceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FlowSourceBaseline_type > FlowSourceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FlowSourceBaseline_type, char > FlowSourceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FlowSourceBaseline_optional&
          FlowSourceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FlowSourceBaseline_optional&
          FlowSourceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FlowSourceBaseline (const FlowSourceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FlowSourceBaseline (const FlowSourceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FlowSourceBaseline (::std::unique_ptr< FlowSourceBaseline_type > p);

          //@}

          /**
           * @name HeatTransferRate
           *
           * @brief Accessor and modifier functions for the %HeatTransferRate
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData HeatTransferRate_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatTransferRate_type, char > HeatTransferRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeatTransferRate_type&
          HeatTransferRate () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeatTransferRate_type&
          HeatTransferRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatTransferRate (const HeatTransferRate_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          HeatTransferRate (::std::unique_ptr< HeatTransferRate_type > p);

          //@}

          /**
           * @name NextHeatTransferRate
           *
           * @brief Accessor and modifier functions for the %NextHeatTransferRate
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData NextHeatTransferRate_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextHeatTransferRate_type, char > NextHeatTransferRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NextHeatTransferRate_type&
          NextHeatTransferRate () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NextHeatTransferRate_type&
          NextHeatTransferRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextHeatTransferRate (const NextHeatTransferRate_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          NextHeatTransferRate (::std::unique_ptr< NextHeatTransferRate_type > p);

          //@}

          /**
           * @name HeatTransferRateBaseline
           *
           * @brief Accessor and modifier functions for the %HeatTransferRateBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData HeatTransferRateBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatTransferRateBaseline_type, char > HeatTransferRateBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeatTransferRateBaseline_type&
          HeatTransferRateBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeatTransferRateBaseline_type&
          HeatTransferRateBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatTransferRateBaseline (const HeatTransferRateBaseline_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          HeatTransferRateBaseline (::std::unique_ptr< HeatTransferRateBaseline_type > p);

          //@}

          /**
           * @name HeatSource
           *
           * @brief Accessor and modifier functions for the %HeatSource
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData HeatSource_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatSource_type, char > HeatSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeatSource_type&
          HeatSource () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeatSource_type&
          HeatSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatSource (const HeatSource_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          HeatSource (::std::unique_ptr< HeatSource_type > p);

          //@}

          /**
           * @name NextHeatSource
           *
           * @brief Accessor and modifier functions for the %NextHeatSource
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData NextHeatSource_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextHeatSource_type, char > NextHeatSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NextHeatSource_type&
          NextHeatSource () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NextHeatSource_type&
          NextHeatSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextHeatSource (const NextHeatSource_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          NextHeatSource (::std::unique_ptr< NextHeatSource_type > p);

          //@}

          /**
           * @name HeatSourceBaseline
           *
           * @brief Accessor and modifier functions for the %HeatSourceBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData HeatSourceBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatSourceBaseline_type, char > HeatSourceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeatSourceBaseline_type&
          HeatSourceBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeatSourceBaseline_type&
          HeatSourceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatSourceBaseline (const HeatSourceBaseline_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          HeatSourceBaseline (::std::unique_ptr< HeatSourceBaseline_type > p);

          //@}

          /**
           * @name ElectricCurrent
           *
           * @brief Accessor and modifier functions for the %ElectricCurrent
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricCurrentData ElectricCurrent_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricCurrent_type, char > ElectricCurrent_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElectricCurrent_type&
          ElectricCurrent () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElectricCurrent_type&
          ElectricCurrent ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricCurrent (const ElectricCurrent_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ElectricCurrent (::std::unique_ptr< ElectricCurrent_type > p);

          //@}

          /**
           * @name NextElectricCurrent
           *
           * @brief Accessor and modifier functions for the %NextElectricCurrent
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricCurrentData NextElectricCurrent_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextElectricCurrent_type, char > NextElectricCurrent_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NextElectricCurrent_type&
          NextElectricCurrent () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NextElectricCurrent_type&
          NextElectricCurrent ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextElectricCurrent (const NextElectricCurrent_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          NextElectricCurrent (::std::unique_ptr< NextElectricCurrent_type > p);

          //@}

          /**
           * @name ElectricCurrentBaseline
           *
           * @brief Accessor and modifier functions for the %ElectricCurrentBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricCurrentData ElectricCurrentBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricCurrentBaseline_type, char > ElectricCurrentBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElectricCurrentBaseline_type&
          ElectricCurrentBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElectricCurrentBaseline_type&
          ElectricCurrentBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricCurrentBaseline (const ElectricCurrentBaseline_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ElectricCurrentBaseline (::std::unique_ptr< ElectricCurrentBaseline_type > p);

          //@}

          /**
           * @name ElectricCurrentSource
           *
           * @brief Accessor and modifier functions for the %ElectricCurrentSource
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricCurrentData ElectricCurrentSource_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricCurrentSource_type, char > ElectricCurrentSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElectricCurrentSource_type&
          ElectricCurrentSource () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElectricCurrentSource_type&
          ElectricCurrentSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricCurrentSource (const ElectricCurrentSource_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ElectricCurrentSource (::std::unique_ptr< ElectricCurrentSource_type > p);

          //@}

          /**
           * @name NextElectricCurrentSource
           *
           * @brief Accessor and modifier functions for the %NextElectricCurrentSource
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricCurrentData NextElectricCurrentSource_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextElectricCurrentSource_type, char > NextElectricCurrentSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NextElectricCurrentSource_type&
          NextElectricCurrentSource () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NextElectricCurrentSource_type&
          NextElectricCurrentSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextElectricCurrentSource (const NextElectricCurrentSource_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          NextElectricCurrentSource (::std::unique_ptr< NextElectricCurrentSource_type > p);

          //@}

          /**
           * @name ElectricCurrentSourceBaseline
           *
           * @brief Accessor and modifier functions for the %ElectricCurrentSourceBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricCurrentData ElectricCurrentSourceBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricCurrentSourceBaseline_type, char > ElectricCurrentSourceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElectricCurrentSourceBaseline_type&
          ElectricCurrentSourceBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElectricCurrentSourceBaseline_type&
          ElectricCurrentSourceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricCurrentSourceBaseline (const ElectricCurrentSourceBaseline_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ElectricCurrentSourceBaseline (::std::unique_ptr< ElectricCurrentSourceBaseline_type > p);

          //@}

          /**
           * @name PressureSource
           *
           * @brief Accessor and modifier functions for the %PressureSource
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PressureSource_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PressureSource_type > PressureSource_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PressureSource_type, char > PressureSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PressureSource_optional&
          PressureSource () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PressureSource_optional&
          PressureSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PressureSource (const PressureSource_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PressureSource (const PressureSource_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PressureSource (::std::unique_ptr< PressureSource_type > p);

          //@}

          /**
           * @name NextPressureSource
           *
           * @brief Accessor and modifier functions for the %NextPressureSource
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData NextPressureSource_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextPressureSource_type > NextPressureSource_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextPressureSource_type, char > NextPressureSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextPressureSource_optional&
          NextPressureSource () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextPressureSource_optional&
          NextPressureSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextPressureSource (const NextPressureSource_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextPressureSource (const NextPressureSource_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextPressureSource (::std::unique_ptr< NextPressureSource_type > p);

          //@}

          /**
           * @name PressureSourceBaseline
           *
           * @brief Accessor and modifier functions for the %PressureSourceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PressureSourceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PressureSourceBaseline_type > PressureSourceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PressureSourceBaseline_type, char > PressureSourceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PressureSourceBaseline_optional&
          PressureSourceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PressureSourceBaseline_optional&
          PressureSourceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PressureSourceBaseline (const PressureSourceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PressureSourceBaseline (const PressureSourceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PressureSourceBaseline (::std::unique_ptr< PressureSourceBaseline_type > p);

          //@}

          /**
           * @name TemperatureSource
           *
           * @brief Accessor and modifier functions for the %TemperatureSource
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData TemperatureSource_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TemperatureSource_type > TemperatureSource_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TemperatureSource_type, char > TemperatureSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TemperatureSource_optional&
          TemperatureSource () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TemperatureSource_optional&
          TemperatureSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TemperatureSource (const TemperatureSource_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TemperatureSource (const TemperatureSource_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TemperatureSource (::std::unique_ptr< TemperatureSource_type > p);

          //@}

          /**
           * @name NextTemperatureSource
           *
           * @brief Accessor and modifier functions for the %NextTemperatureSource
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData NextTemperatureSource_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextTemperatureSource_type > NextTemperatureSource_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextTemperatureSource_type, char > NextTemperatureSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextTemperatureSource_optional&
          NextTemperatureSource () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextTemperatureSource_optional&
          NextTemperatureSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextTemperatureSource (const NextTemperatureSource_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextTemperatureSource (const NextTemperatureSource_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextTemperatureSource (::std::unique_ptr< NextTemperatureSource_type > p);

          //@}

          /**
           * @name TemperatureSourceBaseline
           *
           * @brief Accessor and modifier functions for the %TemperatureSourceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData TemperatureSourceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TemperatureSourceBaseline_type > TemperatureSourceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TemperatureSourceBaseline_type, char > TemperatureSourceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TemperatureSourceBaseline_optional&
          TemperatureSourceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TemperatureSourceBaseline_optional&
          TemperatureSourceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TemperatureSourceBaseline (const TemperatureSourceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TemperatureSourceBaseline (const TemperatureSourceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TemperatureSourceBaseline (::std::unique_ptr< TemperatureSourceBaseline_type > p);

          //@}

          /**
           * @name ElectricVoltageSource
           *
           * @brief Accessor and modifier functions for the %ElectricVoltageSource
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricPotentialData ElectricVoltageSource_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectricVoltageSource_type > ElectricVoltageSource_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricVoltageSource_type, char > ElectricVoltageSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectricVoltageSource_optional&
          ElectricVoltageSource () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectricVoltageSource_optional&
          ElectricVoltageSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricVoltageSource (const ElectricVoltageSource_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectricVoltageSource (const ElectricVoltageSource_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectricVoltageSource (::std::unique_ptr< ElectricVoltageSource_type > p);

          //@}

          /**
           * @name NextElectricVoltageSource
           *
           * @brief Accessor and modifier functions for the %NextElectricVoltageSource
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricPotentialData NextElectricVoltageSource_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextElectricVoltageSource_type > NextElectricVoltageSource_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextElectricVoltageSource_type, char > NextElectricVoltageSource_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextElectricVoltageSource_optional&
          NextElectricVoltageSource () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextElectricVoltageSource_optional&
          NextElectricVoltageSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextElectricVoltageSource (const NextElectricVoltageSource_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextElectricVoltageSource (const NextElectricVoltageSource_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextElectricVoltageSource (::std::unique_ptr< NextElectricVoltageSource_type > p);

          //@}

          /**
           * @name ElectricVoltageSourceBaseline
           *
           * @brief Accessor and modifier functions for the %ElectricVoltageSourceBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricPotentialData ElectricVoltageSourceBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectricVoltageSourceBaseline_type > ElectricVoltageSourceBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricVoltageSourceBaseline_type, char > ElectricVoltageSourceBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectricVoltageSourceBaseline_optional&
          ElectricVoltageSourceBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectricVoltageSourceBaseline_optional&
          ElectricVoltageSourceBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricVoltageSourceBaseline (const ElectricVoltageSourceBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectricVoltageSourceBaseline (const ElectricVoltageSourceBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectricVoltageSourceBaseline (::std::unique_ptr< ElectricVoltageSourceBaseline_type > p);

          //@}

          /**
           * @name Volume
           *
           * @brief Accessor and modifier functions for the %Volume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData Volume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Volume_type > Volume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Volume_type, char > Volume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Volume_optional&
          Volume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Volume_optional&
          Volume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Volume (const Volume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Volume (const Volume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Volume (::std::unique_ptr< Volume_type > p);

          //@}

          /**
           * @name NextVolume
           *
           * @brief Accessor and modifier functions for the %NextVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData NextVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextVolume_type > NextVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextVolume_type, char > NextVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextVolume_optional&
          NextVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextVolume_optional&
          NextVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextVolume (const NextVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextVolume (const NextVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextVolume (::std::unique_ptr< NextVolume_type > p);

          //@}

          /**
           * @name VolumeBaseline
           *
           * @brief Accessor and modifier functions for the %VolumeBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData VolumeBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VolumeBaseline_type > VolumeBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VolumeBaseline_type, char > VolumeBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VolumeBaseline_optional&
          VolumeBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VolumeBaseline_optional&
          VolumeBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VolumeBaseline (const VolumeBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VolumeBaseline (const VolumeBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VolumeBaseline (::std::unique_ptr< VolumeBaseline_type > p);

          //@}

          /**
           * @name UnstressedVolume
           *
           * @brief Accessor and modifier functions for the %UnstressedVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData UnstressedVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UnstressedVolume_type > UnstressedVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UnstressedVolume_type, char > UnstressedVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UnstressedVolume_optional&
          UnstressedVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UnstressedVolume_optional&
          UnstressedVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UnstressedVolume (const UnstressedVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UnstressedVolume (const UnstressedVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UnstressedVolume (::std::unique_ptr< UnstressedVolume_type > p);

          //@}

          /**
           * @name Heat
           *
           * @brief Accessor and modifier functions for the %Heat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarEnergyData Heat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Heat_type > Heat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Heat_type, char > Heat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Heat_optional&
          Heat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Heat_optional&
          Heat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Heat (const Heat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Heat (const Heat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Heat (::std::unique_ptr< Heat_type > p);

          //@}

          /**
           * @name NextHeat
           *
           * @brief Accessor and modifier functions for the %NextHeat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarEnergyData NextHeat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextHeat_type > NextHeat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextHeat_type, char > NextHeat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextHeat_optional&
          NextHeat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextHeat_optional&
          NextHeat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextHeat (const NextHeat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextHeat (const NextHeat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextHeat (::std::unique_ptr< NextHeat_type > p);

          //@}

          /**
           * @name HeatBaseline
           *
           * @brief Accessor and modifier functions for the %HeatBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarEnergyData HeatBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeatBaseline_type > HeatBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeatBaseline_type, char > HeatBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeatBaseline_optional&
          HeatBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeatBaseline_optional&
          HeatBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeatBaseline (const HeatBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeatBaseline (const HeatBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeatBaseline (::std::unique_ptr< HeatBaseline_type > p);

          //@}

          /**
           * @name ElectricCharge
           *
           * @brief Accessor and modifier functions for the %ElectricCharge
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricChargeData ElectricCharge_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectricCharge_type > ElectricCharge_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricCharge_type, char > ElectricCharge_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectricCharge_optional&
          ElectricCharge () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectricCharge_optional&
          ElectricCharge ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricCharge (const ElectricCharge_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectricCharge (const ElectricCharge_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectricCharge (::std::unique_ptr< ElectricCharge_type > p);

          //@}

          /**
           * @name NextElectricCharge
           *
           * @brief Accessor and modifier functions for the %NextElectricCharge
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricChargeData NextElectricCharge_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextElectricCharge_type > NextElectricCharge_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextElectricCharge_type, char > NextElectricCharge_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextElectricCharge_optional&
          NextElectricCharge () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextElectricCharge_optional&
          NextElectricCharge ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextElectricCharge (const NextElectricCharge_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextElectricCharge (const NextElectricCharge_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextElectricCharge (::std::unique_ptr< NextElectricCharge_type > p);

          //@}

          /**
           * @name ElectricChargeBaseline
           *
           * @brief Accessor and modifier functions for the %ElectricChargeBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricChargeData ElectricChargeBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectricChargeBaseline_type > ElectricChargeBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricChargeBaseline_type, char > ElectricChargeBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectricChargeBaseline_optional&
          ElectricChargeBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectricChargeBaseline_optional&
          ElectricChargeBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectricChargeBaseline (const ElectricChargeBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectricChargeBaseline (const ElectricChargeBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectricChargeBaseline (::std::unique_ptr< ElectricChargeBaseline_type > p);

          //@}

          /**
           * @name PolarizedState
           *
           * @brief Accessor and modifier functions for the %PolarizedState
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOpenClosed PolarizedState_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PolarizedState_type > PolarizedState_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PolarizedState_type, char > PolarizedState_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PolarizedState_optional&
          PolarizedState () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PolarizedState_optional&
          PolarizedState ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PolarizedState (const PolarizedState_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PolarizedState (const PolarizedState_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PolarizedState (::std::unique_ptr< PolarizedState_type > p);

          //@}

          /**
           * @name NextPolarizedState
           *
           * @brief Accessor and modifier functions for the %NextPolarizedState
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOpenClosed NextPolarizedState_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NextPolarizedState_type > NextPolarizedState_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NextPolarizedState_type, char > NextPolarizedState_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NextPolarizedState_optional&
          NextPolarizedState () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NextPolarizedState_optional&
          NextPolarizedState ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NextPolarizedState (const NextPolarizedState_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NextPolarizedState (const NextPolarizedState_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NextPolarizedState (::std::unique_ptr< NextPolarizedState_type > p);

          //@}

          /**
           * @name TransportSubstancesAcrossPath
           *
           * @brief Accessor and modifier functions for the %TransportSubstancesAcrossPath
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::boolean TransportSubstancesAcrossPath_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TransportSubstancesAcrossPath_type, char > TransportSubstancesAcrossPath_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const TransportSubstancesAcrossPath_type&
          TransportSubstancesAcrossPath () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          TransportSubstancesAcrossPath_type&
          TransportSubstancesAcrossPath ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          TransportSubstancesAcrossPath (const TransportSubstancesAcrossPath_type& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static TransportSubstancesAcrossPath_type
          TransportSubstancesAcrossPath_default_value ();

          //@}

          /**
           * @name IsInterConnectedPath
           *
           * @brief Accessor and modifier functions for the %IsInterConnectedPath
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::boolean IsInterConnectedPath_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< IsInterConnectedPath_type, char > IsInterConnectedPath_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const IsInterConnectedPath_type&
          IsInterConnectedPath () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          IsInterConnectedPath_type&
          IsInterConnectedPath ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          IsInterConnectedPath (const IsInterConnectedPath_type& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static IsInterConnectedPath_type
          IsInterConnectedPath_default_value ();

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          CircuitPathData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CircuitPathData (const SourceNode_type&,
                           const TargetNode_type&,
                           const HeatResistance_type&,
                           const NextHeatResistance_type&,
                           const HeatResistanceBaseline_type&,
                           const ElectricResistance_type&,
                           const NextElectricResistance_type&,
                           const ElectricResistanceBaseline_type&,
                           const HeatTransferRate_type&,
                           const NextHeatTransferRate_type&,
                           const HeatTransferRateBaseline_type&,
                           const HeatSource_type&,
                           const NextHeatSource_type&,
                           const HeatSourceBaseline_type&,
                           const ElectricCurrent_type&,
                           const NextElectricCurrent_type&,
                           const ElectricCurrentBaseline_type&,
                           const ElectricCurrentSource_type&,
                           const NextElectricCurrentSource_type&,
                           const ElectricCurrentSourceBaseline_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          CircuitPathData (const SourceNode_type&,
                           const TargetNode_type&,
                           ::std::unique_ptr< HeatResistance_type >,
                           ::std::unique_ptr< NextHeatResistance_type >,
                           ::std::unique_ptr< HeatResistanceBaseline_type >,
                           ::std::unique_ptr< ElectricResistance_type >,
                           ::std::unique_ptr< NextElectricResistance_type >,
                           ::std::unique_ptr< ElectricResistanceBaseline_type >,
                           ::std::unique_ptr< HeatTransferRate_type >,
                           ::std::unique_ptr< NextHeatTransferRate_type >,
                           ::std::unique_ptr< HeatTransferRateBaseline_type >,
                           ::std::unique_ptr< HeatSource_type >,
                           ::std::unique_ptr< NextHeatSource_type >,
                           ::std::unique_ptr< HeatSourceBaseline_type >,
                           ::std::unique_ptr< ElectricCurrent_type >,
                           ::std::unique_ptr< NextElectricCurrent_type >,
                           ::std::unique_ptr< ElectricCurrentBaseline_type >,
                           ::std::unique_ptr< ElectricCurrentSource_type >,
                           ::std::unique_ptr< NextElectricCurrentSource_type >,
                           ::std::unique_ptr< ElectricCurrentSourceBaseline_type >);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          CircuitPathData (::std::unique_ptr< SourceNode_type >,
                           ::std::unique_ptr< TargetNode_type >,
                           ::std::unique_ptr< HeatResistance_type >,
                           ::std::unique_ptr< NextHeatResistance_type >,
                           ::std::unique_ptr< HeatResistanceBaseline_type >,
                           ::std::unique_ptr< ElectricResistance_type >,
                           ::std::unique_ptr< NextElectricResistance_type >,
                           ::std::unique_ptr< ElectricResistanceBaseline_type >,
                           ::std::unique_ptr< HeatTransferRate_type >,
                           ::std::unique_ptr< NextHeatTransferRate_type >,
                           ::std::unique_ptr< HeatTransferRateBaseline_type >,
                           ::std::unique_ptr< HeatSource_type >,
                           ::std::unique_ptr< NextHeatSource_type >,
                           ::std::unique_ptr< HeatSourceBaseline_type >,
                           ::std::unique_ptr< ElectricCurrent_type >,
                           ::std::unique_ptr< NextElectricCurrent_type >,
                           ::std::unique_ptr< ElectricCurrentBaseline_type >,
                           ::std::unique_ptr< ElectricCurrentSource_type >,
                           ::std::unique_ptr< NextElectricCurrentSource_type >,
                           ::std::unique_ptr< ElectricCurrentSourceBaseline_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CircuitPathData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CircuitPathData (const CircuitPathData& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CircuitPathData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CircuitPathData&
          operator= (const CircuitPathData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CircuitPathData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          Name_optional Name_;
          ::xsd::cxx::tree::one< SourceNode_type > SourceNode_;
          ::xsd::cxx::tree::one< TargetNode_type > TargetNode_;
          Switch_optional Switch_;
          NextSwitch_optional NextSwitch_;
          Valve_optional Valve_;
          NextValve_optional NextValve_;
          FlowResistance_optional FlowResistance_;
          NextFlowResistance_optional NextFlowResistance_;
          FlowResistanceBaseline_optional FlowResistanceBaseline_;
          ::xsd::cxx::tree::one< HeatResistance_type > HeatResistance_;
          ::xsd::cxx::tree::one< NextHeatResistance_type > NextHeatResistance_;
          ::xsd::cxx::tree::one< HeatResistanceBaseline_type > HeatResistanceBaseline_;
          ::xsd::cxx::tree::one< ElectricResistance_type > ElectricResistance_;
          ::xsd::cxx::tree::one< NextElectricResistance_type > NextElectricResistance_;
          ::xsd::cxx::tree::one< ElectricResistanceBaseline_type > ElectricResistanceBaseline_;
          FlowCompliance_optional FlowCompliance_;
          NextFlowCompliance_optional NextFlowCompliance_;
          FlowComplianceBaseline_optional FlowComplianceBaseline_;
          HeatCapacitance_optional HeatCapacitance_;
          NextHeatCapacitance_optional NextHeatCapacitance_;
          HeatCapacitanceBaseline_optional HeatCapacitanceBaseline_;
          ElectricCapacitance_optional ElectricCapacitance_;
          NextElectricCapacitance_optional NextElectricCapacitance_;
          ElectricCapacitanceBaseline_optional ElectricCapacitanceBaseline_;
          FlowInertance_optional FlowInertance_;
          NextFlowInertance_optional NextFlowInertance_;
          FlowInertanceBaseline_optional FlowInertanceBaseline_;
          HeatInductance_optional HeatInductance_;
          NextHeatInductance_optional NextHeatInductance_;
          HeatInductanceBaseline_optional HeatInductanceBaseline_;
          ElectricInductance_optional ElectricInductance_;
          NextElectricInductance_optional NextElectricInductance_;
          ElectricInductanceBaseline_optional ElectricInductanceBaseline_;
          Flow_optional Flow_;
          NextFlow_optional NextFlow_;
          FlowBaseline_optional FlowBaseline_;
          FlowSource_optional FlowSource_;
          NextFlowSource_optional NextFlowSource_;
          FlowSourceBaseline_optional FlowSourceBaseline_;
          ::xsd::cxx::tree::one< HeatTransferRate_type > HeatTransferRate_;
          ::xsd::cxx::tree::one< NextHeatTransferRate_type > NextHeatTransferRate_;
          ::xsd::cxx::tree::one< HeatTransferRateBaseline_type > HeatTransferRateBaseline_;
          ::xsd::cxx::tree::one< HeatSource_type > HeatSource_;
          ::xsd::cxx::tree::one< NextHeatSource_type > NextHeatSource_;
          ::xsd::cxx::tree::one< HeatSourceBaseline_type > HeatSourceBaseline_;
          ::xsd::cxx::tree::one< ElectricCurrent_type > ElectricCurrent_;
          ::xsd::cxx::tree::one< NextElectricCurrent_type > NextElectricCurrent_;
          ::xsd::cxx::tree::one< ElectricCurrentBaseline_type > ElectricCurrentBaseline_;
          ::xsd::cxx::tree::one< ElectricCurrentSource_type > ElectricCurrentSource_;
          ::xsd::cxx::tree::one< NextElectricCurrentSource_type > NextElectricCurrentSource_;
          ::xsd::cxx::tree::one< ElectricCurrentSourceBaseline_type > ElectricCurrentSourceBaseline_;
          PressureSource_optional PressureSource_;
          NextPressureSource_optional NextPressureSource_;
          PressureSourceBaseline_optional PressureSourceBaseline_;
          TemperatureSource_optional TemperatureSource_;
          NextTemperatureSource_optional NextTemperatureSource_;
          TemperatureSourceBaseline_optional TemperatureSourceBaseline_;
          ElectricVoltageSource_optional ElectricVoltageSource_;
          NextElectricVoltageSource_optional NextElectricVoltageSource_;
          ElectricVoltageSourceBaseline_optional ElectricVoltageSourceBaseline_;
          Volume_optional Volume_;
          NextVolume_optional NextVolume_;
          VolumeBaseline_optional VolumeBaseline_;
          UnstressedVolume_optional UnstressedVolume_;
          Heat_optional Heat_;
          NextHeat_optional NextHeat_;
          HeatBaseline_optional HeatBaseline_;
          ElectricCharge_optional ElectricCharge_;
          NextElectricCharge_optional NextElectricCharge_;
          ElectricChargeBaseline_optional ElectricChargeBaseline_;
          PolarizedState_optional PolarizedState_;
          NextPolarizedState_optional NextPolarizedState_;
          ::xsd::cxx::tree::one< TransportSubstancesAcrossPath_type > TransportSubstancesAcrossPath_;
          ::xsd::cxx::tree::one< IsInterConnectedPath_type > IsInterConnectedPath_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream&, const CircuitPathData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement&, const CircuitPathData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "decimal.hxx"

#include "double-parsing.hxx"
#include "decimal-parsing.hxx"

#include "double-serialization.hxx"
#include "decimal-serialization.hxx"
//
// End epilogue.

#endif // CIRCUIT_PATH_DATA_HXX
