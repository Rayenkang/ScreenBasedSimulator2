// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from RenalConfiguration.xsd.
 */

#ifndef RENAL_CONFIGURATION_HXX
#define RENAL_CONFIGURATION_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "cdm-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class RenalConfiguration;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassPerVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarAreaData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFlowResistanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %RenalConfiguration schema type.
         *
         * @nosubgrouping
         */
        class RenalConfiguration: public ::xml_schema::type
        {
          public:
          /**
           * @name GlomerularAlbuminConcentrationSetPoint
           *
           * @brief Accessor and modifier functions for the %GlomerularAlbuminConcentrationSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData GlomerularAlbuminConcentrationSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< GlomerularAlbuminConcentrationSetPoint_type > GlomerularAlbuminConcentrationSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GlomerularAlbuminConcentrationSetPoint_type, char > GlomerularAlbuminConcentrationSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const GlomerularAlbuminConcentrationSetPoint_optional&
          GlomerularAlbuminConcentrationSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          GlomerularAlbuminConcentrationSetPoint_optional&
          GlomerularAlbuminConcentrationSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          GlomerularAlbuminConcentrationSetPoint (const GlomerularAlbuminConcentrationSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          GlomerularAlbuminConcentrationSetPoint (const GlomerularAlbuminConcentrationSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          GlomerularAlbuminConcentrationSetPoint (::std::unique_ptr< GlomerularAlbuminConcentrationSetPoint_type > p);

          //@}

          /**
           * @name BowmansAlbuminConcentrationSetPoint
           *
           * @brief Accessor and modifier functions for the %BowmansAlbuminConcentrationSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData BowmansAlbuminConcentrationSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BowmansAlbuminConcentrationSetPoint_type > BowmansAlbuminConcentrationSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BowmansAlbuminConcentrationSetPoint_type, char > BowmansAlbuminConcentrationSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BowmansAlbuminConcentrationSetPoint_optional&
          BowmansAlbuminConcentrationSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BowmansAlbuminConcentrationSetPoint_optional&
          BowmansAlbuminConcentrationSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BowmansAlbuminConcentrationSetPoint (const BowmansAlbuminConcentrationSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BowmansAlbuminConcentrationSetPoint (const BowmansAlbuminConcentrationSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BowmansAlbuminConcentrationSetPoint (::std::unique_ptr< BowmansAlbuminConcentrationSetPoint_type > p);

          //@}

          /**
           * @name PeritubularAlbuminConcentrationSetPoint
           *
           * @brief Accessor and modifier functions for the %PeritubularAlbuminConcentrationSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData PeritubularAlbuminConcentrationSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PeritubularAlbuminConcentrationSetPoint_type > PeritubularAlbuminConcentrationSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PeritubularAlbuminConcentrationSetPoint_type, char > PeritubularAlbuminConcentrationSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PeritubularAlbuminConcentrationSetPoint_optional&
          PeritubularAlbuminConcentrationSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PeritubularAlbuminConcentrationSetPoint_optional&
          PeritubularAlbuminConcentrationSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PeritubularAlbuminConcentrationSetPoint (const PeritubularAlbuminConcentrationSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PeritubularAlbuminConcentrationSetPoint (const PeritubularAlbuminConcentrationSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PeritubularAlbuminConcentrationSetPoint (::std::unique_ptr< PeritubularAlbuminConcentrationSetPoint_type > p);

          //@}

          /**
           * @name TubulesAlbuminConcentrationSetPoint
           *
           * @brief Accessor and modifier functions for the %TubulesAlbuminConcentrationSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData TubulesAlbuminConcentrationSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TubulesAlbuminConcentrationSetPoint_type > TubulesAlbuminConcentrationSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TubulesAlbuminConcentrationSetPoint_type, char > TubulesAlbuminConcentrationSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TubulesAlbuminConcentrationSetPoint_optional&
          TubulesAlbuminConcentrationSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TubulesAlbuminConcentrationSetPoint_optional&
          TubulesAlbuminConcentrationSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TubulesAlbuminConcentrationSetPoint (const TubulesAlbuminConcentrationSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TubulesAlbuminConcentrationSetPoint (const TubulesAlbuminConcentrationSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TubulesAlbuminConcentrationSetPoint (::std::unique_ptr< TubulesAlbuminConcentrationSetPoint_type > p);

          //@}

          /**
           * @name TubularSodiumConcentrationSetPoint
           *
           * @brief Accessor and modifier functions for the %TubularSodiumConcentrationSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData TubularSodiumConcentrationSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TubularSodiumConcentrationSetPoint_type > TubularSodiumConcentrationSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TubularSodiumConcentrationSetPoint_type, char > TubularSodiumConcentrationSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TubularSodiumConcentrationSetPoint_optional&
          TubularSodiumConcentrationSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TubularSodiumConcentrationSetPoint_optional&
          TubularSodiumConcentrationSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TubularSodiumConcentrationSetPoint (const TubularSodiumConcentrationSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TubularSodiumConcentrationSetPoint (const TubularSodiumConcentrationSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TubularSodiumConcentrationSetPoint (::std::unique_ptr< TubularSodiumConcentrationSetPoint_type > p);

          //@}

          /**
           * @name PlasmaSodiumConcentrationSetPoint
           *
           * @brief Accessor and modifier functions for the %PlasmaSodiumConcentrationSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData PlasmaSodiumConcentrationSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PlasmaSodiumConcentrationSetPoint_type > PlasmaSodiumConcentrationSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PlasmaSodiumConcentrationSetPoint_type, char > PlasmaSodiumConcentrationSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PlasmaSodiumConcentrationSetPoint_optional&
          PlasmaSodiumConcentrationSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PlasmaSodiumConcentrationSetPoint_optional&
          PlasmaSodiumConcentrationSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PlasmaSodiumConcentrationSetPoint (const PlasmaSodiumConcentrationSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PlasmaSodiumConcentrationSetPoint (const PlasmaSodiumConcentrationSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PlasmaSodiumConcentrationSetPoint (::std::unique_ptr< PlasmaSodiumConcentrationSetPoint_type > p);

          //@}

          /**
           * @name LeftGlomerularFilteringSurfaceAreaBaseline
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFilteringSurfaceAreaBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData LeftGlomerularFilteringSurfaceAreaBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFilteringSurfaceAreaBaseline_type > LeftGlomerularFilteringSurfaceAreaBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFilteringSurfaceAreaBaseline_type, char > LeftGlomerularFilteringSurfaceAreaBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFilteringSurfaceAreaBaseline_optional&
          LeftGlomerularFilteringSurfaceAreaBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFilteringSurfaceAreaBaseline_optional&
          LeftGlomerularFilteringSurfaceAreaBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFilteringSurfaceAreaBaseline (const LeftGlomerularFilteringSurfaceAreaBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFilteringSurfaceAreaBaseline (const LeftGlomerularFilteringSurfaceAreaBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFilteringSurfaceAreaBaseline (::std::unique_ptr< LeftGlomerularFilteringSurfaceAreaBaseline_type > p);

          //@}

          /**
           * @name LeftGlomerularFluidPermeabilityBaseline
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFluidPermeabilityBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData LeftGlomerularFluidPermeabilityBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFluidPermeabilityBaseline_type > LeftGlomerularFluidPermeabilityBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFluidPermeabilityBaseline_type, char > LeftGlomerularFluidPermeabilityBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFluidPermeabilityBaseline_optional&
          LeftGlomerularFluidPermeabilityBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFluidPermeabilityBaseline_optional&
          LeftGlomerularFluidPermeabilityBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFluidPermeabilityBaseline (const LeftGlomerularFluidPermeabilityBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFluidPermeabilityBaseline (const LeftGlomerularFluidPermeabilityBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFluidPermeabilityBaseline (::std::unique_ptr< LeftGlomerularFluidPermeabilityBaseline_type > p);

          //@}

          /**
           * @name LeftTubularReabsorptionFilteringSurfaceAreaBaseline
           *
           * @brief Accessor and modifier functions for the %LeftTubularReabsorptionFilteringSurfaceAreaBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type > LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type, char > LeftTubularReabsorptionFilteringSurfaceAreaBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional&
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional&
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline (const LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline (const LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline (::std::unique_ptr< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type > p);

          //@}

          /**
           * @name LeftTubularReabsorptionFluidPermeabilityBaseline
           *
           * @brief Accessor and modifier functions for the %LeftTubularReabsorptionFluidPermeabilityBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData LeftTubularReabsorptionFluidPermeabilityBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularReabsorptionFluidPermeabilityBaseline_type > LeftTubularReabsorptionFluidPermeabilityBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularReabsorptionFluidPermeabilityBaseline_type, char > LeftTubularReabsorptionFluidPermeabilityBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularReabsorptionFluidPermeabilityBaseline_optional&
          LeftTubularReabsorptionFluidPermeabilityBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularReabsorptionFluidPermeabilityBaseline_optional&
          LeftTubularReabsorptionFluidPermeabilityBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularReabsorptionFluidPermeabilityBaseline (const LeftTubularReabsorptionFluidPermeabilityBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularReabsorptionFluidPermeabilityBaseline (const LeftTubularReabsorptionFluidPermeabilityBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularReabsorptionFluidPermeabilityBaseline (::std::unique_ptr< LeftTubularReabsorptionFluidPermeabilityBaseline_type > p);

          //@}

          /**
           * @name MaximumAfferentResistance
           *
           * @brief Accessor and modifier functions for the %MaximumAfferentResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData MaximumAfferentResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MaximumAfferentResistance_type > MaximumAfferentResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MaximumAfferentResistance_type, char > MaximumAfferentResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MaximumAfferentResistance_optional&
          MaximumAfferentResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MaximumAfferentResistance_optional&
          MaximumAfferentResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MaximumAfferentResistance (const MaximumAfferentResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MaximumAfferentResistance (const MaximumAfferentResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MaximumAfferentResistance (::std::unique_ptr< MaximumAfferentResistance_type > p);

          //@}

          /**
           * @name MinimumAfferentResistance
           *
           * @brief Accessor and modifier functions for the %MinimumAfferentResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData MinimumAfferentResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MinimumAfferentResistance_type > MinimumAfferentResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MinimumAfferentResistance_type, char > MinimumAfferentResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MinimumAfferentResistance_optional&
          MinimumAfferentResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MinimumAfferentResistance_optional&
          MinimumAfferentResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MinimumAfferentResistance (const MinimumAfferentResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MinimumAfferentResistance (const MinimumAfferentResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MinimumAfferentResistance (::std::unique_ptr< MinimumAfferentResistance_type > p);

          //@}

          /**
           * @name MaximumEfferentResistance
           *
           * @brief Accessor and modifier functions for the %MaximumEfferentResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData MaximumEfferentResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MaximumEfferentResistance_type > MaximumEfferentResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MaximumEfferentResistance_type, char > MaximumEfferentResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MaximumEfferentResistance_optional&
          MaximumEfferentResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MaximumEfferentResistance_optional&
          MaximumEfferentResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MaximumEfferentResistance (const MaximumEfferentResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MaximumEfferentResistance (const MaximumEfferentResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MaximumEfferentResistance (::std::unique_ptr< MaximumEfferentResistance_type > p);

          //@}

          /**
           * @name MinimumEfferentResistance
           *
           * @brief Accessor and modifier functions for the %MinimumEfferentResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData MinimumEfferentResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MinimumEfferentResistance_type > MinimumEfferentResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MinimumEfferentResistance_type, char > MinimumEfferentResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MinimumEfferentResistance_optional&
          MinimumEfferentResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MinimumEfferentResistance_optional&
          MinimumEfferentResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MinimumEfferentResistance (const MinimumEfferentResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MinimumEfferentResistance (const MinimumEfferentResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MinimumEfferentResistance (::std::unique_ptr< MinimumEfferentResistance_type > p);

          //@}

          /**
           * @name RightGlomerularFilteringSurfaceAreaBaseline
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFilteringSurfaceAreaBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData RightGlomerularFilteringSurfaceAreaBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFilteringSurfaceAreaBaseline_type > RightGlomerularFilteringSurfaceAreaBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFilteringSurfaceAreaBaseline_type, char > RightGlomerularFilteringSurfaceAreaBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFilteringSurfaceAreaBaseline_optional&
          RightGlomerularFilteringSurfaceAreaBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFilteringSurfaceAreaBaseline_optional&
          RightGlomerularFilteringSurfaceAreaBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFilteringSurfaceAreaBaseline (const RightGlomerularFilteringSurfaceAreaBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFilteringSurfaceAreaBaseline (const RightGlomerularFilteringSurfaceAreaBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFilteringSurfaceAreaBaseline (::std::unique_ptr< RightGlomerularFilteringSurfaceAreaBaseline_type > p);

          //@}

          /**
           * @name RightGlomerularFluidPermeabilityBaseline
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFluidPermeabilityBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData RightGlomerularFluidPermeabilityBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFluidPermeabilityBaseline_type > RightGlomerularFluidPermeabilityBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFluidPermeabilityBaseline_type, char > RightGlomerularFluidPermeabilityBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFluidPermeabilityBaseline_optional&
          RightGlomerularFluidPermeabilityBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFluidPermeabilityBaseline_optional&
          RightGlomerularFluidPermeabilityBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFluidPermeabilityBaseline (const RightGlomerularFluidPermeabilityBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFluidPermeabilityBaseline (const RightGlomerularFluidPermeabilityBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFluidPermeabilityBaseline (::std::unique_ptr< RightGlomerularFluidPermeabilityBaseline_type > p);

          //@}

          /**
           * @name RightTubularReabsorptionFilteringSurfaceAreaBaseline
           *
           * @brief Accessor and modifier functions for the %RightTubularReabsorptionFilteringSurfaceAreaBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData RightTubularReabsorptionFilteringSurfaceAreaBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type > RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type, char > RightTubularReabsorptionFilteringSurfaceAreaBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional&
          RightTubularReabsorptionFilteringSurfaceAreaBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional&
          RightTubularReabsorptionFilteringSurfaceAreaBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularReabsorptionFilteringSurfaceAreaBaseline (const RightTubularReabsorptionFilteringSurfaceAreaBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularReabsorptionFilteringSurfaceAreaBaseline (const RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularReabsorptionFilteringSurfaceAreaBaseline (::std::unique_ptr< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type > p);

          //@}

          /**
           * @name RightTubularReabsorptionFluidPermeabilityBaseline
           *
           * @brief Accessor and modifier functions for the %RightTubularReabsorptionFluidPermeabilityBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData RightTubularReabsorptionFluidPermeabilityBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularReabsorptionFluidPermeabilityBaseline_type > RightTubularReabsorptionFluidPermeabilityBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularReabsorptionFluidPermeabilityBaseline_type, char > RightTubularReabsorptionFluidPermeabilityBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularReabsorptionFluidPermeabilityBaseline_optional&
          RightTubularReabsorptionFluidPermeabilityBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularReabsorptionFluidPermeabilityBaseline_optional&
          RightTubularReabsorptionFluidPermeabilityBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularReabsorptionFluidPermeabilityBaseline (const RightTubularReabsorptionFluidPermeabilityBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularReabsorptionFluidPermeabilityBaseline (const RightTubularReabsorptionFluidPermeabilityBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularReabsorptionFluidPermeabilityBaseline (::std::unique_ptr< RightTubularReabsorptionFluidPermeabilityBaseline_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          RenalConfiguration ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RenalConfiguration (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RenalConfiguration (const RenalConfiguration& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RenalConfiguration*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RenalConfiguration&
          operator= (const RenalConfiguration& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~RenalConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          GlomerularAlbuminConcentrationSetPoint_optional GlomerularAlbuminConcentrationSetPoint_;
          BowmansAlbuminConcentrationSetPoint_optional BowmansAlbuminConcentrationSetPoint_;
          PeritubularAlbuminConcentrationSetPoint_optional PeritubularAlbuminConcentrationSetPoint_;
          TubulesAlbuminConcentrationSetPoint_optional TubulesAlbuminConcentrationSetPoint_;
          TubularSodiumConcentrationSetPoint_optional TubularSodiumConcentrationSetPoint_;
          PlasmaSodiumConcentrationSetPoint_optional PlasmaSodiumConcentrationSetPoint_;
          LeftGlomerularFilteringSurfaceAreaBaseline_optional LeftGlomerularFilteringSurfaceAreaBaseline_;
          LeftGlomerularFluidPermeabilityBaseline_optional LeftGlomerularFluidPermeabilityBaseline_;
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional LeftTubularReabsorptionFilteringSurfaceAreaBaseline_;
          LeftTubularReabsorptionFluidPermeabilityBaseline_optional LeftTubularReabsorptionFluidPermeabilityBaseline_;
          MaximumAfferentResistance_optional MaximumAfferentResistance_;
          MinimumAfferentResistance_optional MinimumAfferentResistance_;
          MaximumEfferentResistance_optional MaximumEfferentResistance_;
          MinimumEfferentResistance_optional MinimumEfferentResistance_;
          RightGlomerularFilteringSurfaceAreaBaseline_optional RightGlomerularFilteringSurfaceAreaBaseline_;
          RightGlomerularFluidPermeabilityBaseline_optional RightGlomerularFluidPermeabilityBaseline_;
          RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional RightTubularReabsorptionFilteringSurfaceAreaBaseline_;
          RightTubularReabsorptionFluidPermeabilityBaseline_optional RightTubularReabsorptionFluidPermeabilityBaseline_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream&, const RenalConfiguration&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement&, const RenalConfiguration&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "decimal.hxx"

#include "double-parsing.hxx"
#include "decimal-parsing.hxx"

#include "double-serialization.hxx"
#include "decimal-serialization.hxx"
//
// End epilogue.

#endif // RENAL_CONFIGURATION_HXX
