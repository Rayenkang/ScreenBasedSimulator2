// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from RenalSystemData.xsd.
 */

#ifndef RENAL_SYSTEM_DATA_HXX
#define RENAL_SYSTEM_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "cdm-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class RenalSystemData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "SystemData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumePerTimeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFractionData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFlowResistanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarPressureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumePerTimePerPressureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarAreaData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumePerTimePerPressurePerAreaData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarOsmolalityData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarOsmolarityData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassPerVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %RenalSystemData schema type.
         *
         * @nosubgrouping
         */
        class __attribute__ ((visibility ("default"))) RenalSystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name GlomerularFiltrationRate
           *
           * @brief Accessor and modifier functions for the %GlomerularFiltrationRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData GlomerularFiltrationRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< GlomerularFiltrationRate_type > GlomerularFiltrationRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GlomerularFiltrationRate_type, char > GlomerularFiltrationRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const GlomerularFiltrationRate_optional&
          GlomerularFiltrationRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          GlomerularFiltrationRate_optional&
          GlomerularFiltrationRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          GlomerularFiltrationRate (const GlomerularFiltrationRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          GlomerularFiltrationRate (const GlomerularFiltrationRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          GlomerularFiltrationRate (::std::unique_ptr< GlomerularFiltrationRate_type > p);

          //@}

          /**
           * @name FiltrationFraction
           *
           * @brief Accessor and modifier functions for the %FiltrationFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData FiltrationFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FiltrationFraction_type > FiltrationFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FiltrationFraction_type, char > FiltrationFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FiltrationFraction_optional&
          FiltrationFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FiltrationFraction_optional&
          FiltrationFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FiltrationFraction (const FiltrationFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FiltrationFraction (const FiltrationFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FiltrationFraction (::std::unique_ptr< FiltrationFraction_type > p);

          //@}

          /**
           * @name LeftAfferentArterioleResistance
           *
           * @brief Accessor and modifier functions for the %LeftAfferentArterioleResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData LeftAfferentArterioleResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftAfferentArterioleResistance_type > LeftAfferentArterioleResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftAfferentArterioleResistance_type, char > LeftAfferentArterioleResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftAfferentArterioleResistance_optional&
          LeftAfferentArterioleResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftAfferentArterioleResistance_optional&
          LeftAfferentArterioleResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftAfferentArterioleResistance (const LeftAfferentArterioleResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftAfferentArterioleResistance (const LeftAfferentArterioleResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftAfferentArterioleResistance (::std::unique_ptr< LeftAfferentArterioleResistance_type > p);

          //@}

          /**
           * @name LeftBowmansCapsulesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %LeftBowmansCapsulesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftBowmansCapsulesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftBowmansCapsulesHydrostaticPressure_type > LeftBowmansCapsulesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftBowmansCapsulesHydrostaticPressure_type, char > LeftBowmansCapsulesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftBowmansCapsulesHydrostaticPressure_optional&
          LeftBowmansCapsulesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftBowmansCapsulesHydrostaticPressure_optional&
          LeftBowmansCapsulesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftBowmansCapsulesHydrostaticPressure (const LeftBowmansCapsulesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftBowmansCapsulesHydrostaticPressure (const LeftBowmansCapsulesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftBowmansCapsulesHydrostaticPressure (::std::unique_ptr< LeftBowmansCapsulesHydrostaticPressure_type > p);

          //@}

          /**
           * @name LeftBowmansCapsulesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %LeftBowmansCapsulesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftBowmansCapsulesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftBowmansCapsulesOsmoticPressure_type > LeftBowmansCapsulesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftBowmansCapsulesOsmoticPressure_type, char > LeftBowmansCapsulesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftBowmansCapsulesOsmoticPressure_optional&
          LeftBowmansCapsulesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftBowmansCapsulesOsmoticPressure_optional&
          LeftBowmansCapsulesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftBowmansCapsulesOsmoticPressure (const LeftBowmansCapsulesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftBowmansCapsulesOsmoticPressure (const LeftBowmansCapsulesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftBowmansCapsulesOsmoticPressure (::std::unique_ptr< LeftBowmansCapsulesOsmoticPressure_type > p);

          //@}

          /**
           * @name LeftEfferentArterioleResistance
           *
           * @brief Accessor and modifier functions for the %LeftEfferentArterioleResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData LeftEfferentArterioleResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftEfferentArterioleResistance_type > LeftEfferentArterioleResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftEfferentArterioleResistance_type, char > LeftEfferentArterioleResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftEfferentArterioleResistance_optional&
          LeftEfferentArterioleResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftEfferentArterioleResistance_optional&
          LeftEfferentArterioleResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftEfferentArterioleResistance (const LeftEfferentArterioleResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftEfferentArterioleResistance (const LeftEfferentArterioleResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftEfferentArterioleResistance (::std::unique_ptr< LeftEfferentArterioleResistance_type > p);

          //@}

          /**
           * @name LeftGlomerularCapillariesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularCapillariesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftGlomerularCapillariesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularCapillariesHydrostaticPressure_type > LeftGlomerularCapillariesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularCapillariesHydrostaticPressure_type, char > LeftGlomerularCapillariesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularCapillariesHydrostaticPressure_optional&
          LeftGlomerularCapillariesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularCapillariesHydrostaticPressure_optional&
          LeftGlomerularCapillariesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularCapillariesHydrostaticPressure (const LeftGlomerularCapillariesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularCapillariesHydrostaticPressure (const LeftGlomerularCapillariesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularCapillariesHydrostaticPressure (::std::unique_ptr< LeftGlomerularCapillariesHydrostaticPressure_type > p);

          //@}

          /**
           * @name LeftGlomerularCapillariesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularCapillariesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftGlomerularCapillariesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularCapillariesOsmoticPressure_type > LeftGlomerularCapillariesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularCapillariesOsmoticPressure_type, char > LeftGlomerularCapillariesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularCapillariesOsmoticPressure_optional&
          LeftGlomerularCapillariesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularCapillariesOsmoticPressure_optional&
          LeftGlomerularCapillariesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularCapillariesOsmoticPressure (const LeftGlomerularCapillariesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularCapillariesOsmoticPressure (const LeftGlomerularCapillariesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularCapillariesOsmoticPressure (::std::unique_ptr< LeftGlomerularCapillariesOsmoticPressure_type > p);

          //@}

          /**
           * @name LeftGlomerularFiltrationCoefficient
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFiltrationCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerPressureData LeftGlomerularFiltrationCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFiltrationCoefficient_type > LeftGlomerularFiltrationCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFiltrationCoefficient_type, char > LeftGlomerularFiltrationCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFiltrationCoefficient_optional&
          LeftGlomerularFiltrationCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFiltrationCoefficient_optional&
          LeftGlomerularFiltrationCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFiltrationCoefficient (const LeftGlomerularFiltrationCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFiltrationCoefficient (const LeftGlomerularFiltrationCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFiltrationCoefficient (::std::unique_ptr< LeftGlomerularFiltrationCoefficient_type > p);

          //@}

          /**
           * @name LeftGlomerularFiltrationRate
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFiltrationRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData LeftGlomerularFiltrationRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFiltrationRate_type > LeftGlomerularFiltrationRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFiltrationRate_type, char > LeftGlomerularFiltrationRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFiltrationRate_optional&
          LeftGlomerularFiltrationRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFiltrationRate_optional&
          LeftGlomerularFiltrationRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFiltrationRate (const LeftGlomerularFiltrationRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFiltrationRate (const LeftGlomerularFiltrationRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFiltrationRate (::std::unique_ptr< LeftGlomerularFiltrationRate_type > p);

          //@}

          /**
           * @name LeftGlomerularFiltrationSurfaceArea
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFiltrationSurfaceArea
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData LeftGlomerularFiltrationSurfaceArea_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFiltrationSurfaceArea_type > LeftGlomerularFiltrationSurfaceArea_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFiltrationSurfaceArea_type, char > LeftGlomerularFiltrationSurfaceArea_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFiltrationSurfaceArea_optional&
          LeftGlomerularFiltrationSurfaceArea () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFiltrationSurfaceArea_optional&
          LeftGlomerularFiltrationSurfaceArea ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFiltrationSurfaceArea (const LeftGlomerularFiltrationSurfaceArea_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFiltrationSurfaceArea (const LeftGlomerularFiltrationSurfaceArea_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFiltrationSurfaceArea (::std::unique_ptr< LeftGlomerularFiltrationSurfaceArea_type > p);

          //@}

          /**
           * @name LeftGlomerularFluidPermeability
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFluidPermeability
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerPressurePerAreaData LeftGlomerularFluidPermeability_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFluidPermeability_type > LeftGlomerularFluidPermeability_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFluidPermeability_type, char > LeftGlomerularFluidPermeability_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFluidPermeability_optional&
          LeftGlomerularFluidPermeability () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFluidPermeability_optional&
          LeftGlomerularFluidPermeability ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFluidPermeability (const LeftGlomerularFluidPermeability_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFluidPermeability (const LeftGlomerularFluidPermeability_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFluidPermeability (::std::unique_ptr< LeftGlomerularFluidPermeability_type > p);

          //@}

          /**
           * @name LeftFiltrationFraction
           *
           * @brief Accessor and modifier functions for the %LeftFiltrationFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData LeftFiltrationFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftFiltrationFraction_type > LeftFiltrationFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftFiltrationFraction_type, char > LeftFiltrationFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftFiltrationFraction_optional&
          LeftFiltrationFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftFiltrationFraction_optional&
          LeftFiltrationFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftFiltrationFraction (const LeftFiltrationFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftFiltrationFraction (const LeftFiltrationFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftFiltrationFraction (::std::unique_ptr< LeftFiltrationFraction_type > p);

          //@}

          /**
           * @name LeftNetFiltrationPressure
           *
           * @brief Accessor and modifier functions for the %LeftNetFiltrationPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftNetFiltrationPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftNetFiltrationPressure_type > LeftNetFiltrationPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftNetFiltrationPressure_type, char > LeftNetFiltrationPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftNetFiltrationPressure_optional&
          LeftNetFiltrationPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftNetFiltrationPressure_optional&
          LeftNetFiltrationPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftNetFiltrationPressure (const LeftNetFiltrationPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftNetFiltrationPressure (const LeftNetFiltrationPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftNetFiltrationPressure (::std::unique_ptr< LeftNetFiltrationPressure_type > p);

          //@}

          /**
           * @name LeftNetReabsorptionPressure
           *
           * @brief Accessor and modifier functions for the %LeftNetReabsorptionPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftNetReabsorptionPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftNetReabsorptionPressure_type > LeftNetReabsorptionPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftNetReabsorptionPressure_type, char > LeftNetReabsorptionPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftNetReabsorptionPressure_optional&
          LeftNetReabsorptionPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftNetReabsorptionPressure_optional&
          LeftNetReabsorptionPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftNetReabsorptionPressure (const LeftNetReabsorptionPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftNetReabsorptionPressure (const LeftNetReabsorptionPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftNetReabsorptionPressure (::std::unique_ptr< LeftNetReabsorptionPressure_type > p);

          //@}

          /**
           * @name LeftPeritubularCapillariesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %LeftPeritubularCapillariesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftPeritubularCapillariesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftPeritubularCapillariesHydrostaticPressure_type > LeftPeritubularCapillariesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftPeritubularCapillariesHydrostaticPressure_type, char > LeftPeritubularCapillariesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftPeritubularCapillariesHydrostaticPressure_optional&
          LeftPeritubularCapillariesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftPeritubularCapillariesHydrostaticPressure_optional&
          LeftPeritubularCapillariesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftPeritubularCapillariesHydrostaticPressure (const LeftPeritubularCapillariesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftPeritubularCapillariesHydrostaticPressure (const LeftPeritubularCapillariesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftPeritubularCapillariesHydrostaticPressure (::std::unique_ptr< LeftPeritubularCapillariesHydrostaticPressure_type > p);

          //@}

          /**
           * @name LeftPeritubularCapillariesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %LeftPeritubularCapillariesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftPeritubularCapillariesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftPeritubularCapillariesOsmoticPressure_type > LeftPeritubularCapillariesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftPeritubularCapillariesOsmoticPressure_type, char > LeftPeritubularCapillariesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftPeritubularCapillariesOsmoticPressure_optional&
          LeftPeritubularCapillariesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftPeritubularCapillariesOsmoticPressure_optional&
          LeftPeritubularCapillariesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftPeritubularCapillariesOsmoticPressure (const LeftPeritubularCapillariesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftPeritubularCapillariesOsmoticPressure (const LeftPeritubularCapillariesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftPeritubularCapillariesOsmoticPressure (::std::unique_ptr< LeftPeritubularCapillariesOsmoticPressure_type > p);

          //@}

          /**
           * @name LeftReabsorptionFiltrationCoefficient
           *
           * @brief Accessor and modifier functions for the %LeftReabsorptionFiltrationCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerPressureData LeftReabsorptionFiltrationCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftReabsorptionFiltrationCoefficient_type > LeftReabsorptionFiltrationCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftReabsorptionFiltrationCoefficient_type, char > LeftReabsorptionFiltrationCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftReabsorptionFiltrationCoefficient_optional&
          LeftReabsorptionFiltrationCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftReabsorptionFiltrationCoefficient_optional&
          LeftReabsorptionFiltrationCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftReabsorptionFiltrationCoefficient (const LeftReabsorptionFiltrationCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftReabsorptionFiltrationCoefficient (const LeftReabsorptionFiltrationCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftReabsorptionFiltrationCoefficient (::std::unique_ptr< LeftReabsorptionFiltrationCoefficient_type > p);

          //@}

          /**
           * @name LeftReabsorptionRate
           *
           * @brief Accessor and modifier functions for the %LeftReabsorptionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData LeftReabsorptionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftReabsorptionRate_type > LeftReabsorptionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftReabsorptionRate_type, char > LeftReabsorptionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftReabsorptionRate_optional&
          LeftReabsorptionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftReabsorptionRate_optional&
          LeftReabsorptionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftReabsorptionRate (const LeftReabsorptionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftReabsorptionRate (const LeftReabsorptionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftReabsorptionRate (::std::unique_ptr< LeftReabsorptionRate_type > p);

          //@}

          /**
           * @name LeftTubularOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %LeftTubularOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftTubularOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularOsmoticPressure_type > LeftTubularOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularOsmoticPressure_type, char > LeftTubularOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularOsmoticPressure_optional&
          LeftTubularOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularOsmoticPressure_optional&
          LeftTubularOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularOsmoticPressure (const LeftTubularOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularOsmoticPressure (const LeftTubularOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularOsmoticPressure (::std::unique_ptr< LeftTubularOsmoticPressure_type > p);

          //@}

          /**
           * @name LeftTubularHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %LeftTubularHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftTubularHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularHydrostaticPressure_type > LeftTubularHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularHydrostaticPressure_type, char > LeftTubularHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularHydrostaticPressure_optional&
          LeftTubularHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularHydrostaticPressure_optional&
          LeftTubularHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularHydrostaticPressure (const LeftTubularHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularHydrostaticPressure (const LeftTubularHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularHydrostaticPressure (::std::unique_ptr< LeftTubularHydrostaticPressure_type > p);

          //@}

          /**
           * @name LeftTubularReabsorptionFiltrationSurfaceArea
           *
           * @brief Accessor and modifier functions for the %LeftTubularReabsorptionFiltrationSurfaceArea
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData LeftTubularReabsorptionFiltrationSurfaceArea_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularReabsorptionFiltrationSurfaceArea_type > LeftTubularReabsorptionFiltrationSurfaceArea_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularReabsorptionFiltrationSurfaceArea_type, char > LeftTubularReabsorptionFiltrationSurfaceArea_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularReabsorptionFiltrationSurfaceArea_optional&
          LeftTubularReabsorptionFiltrationSurfaceArea () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularReabsorptionFiltrationSurfaceArea_optional&
          LeftTubularReabsorptionFiltrationSurfaceArea ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularReabsorptionFiltrationSurfaceArea (const LeftTubularReabsorptionFiltrationSurfaceArea_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularReabsorptionFiltrationSurfaceArea (const LeftTubularReabsorptionFiltrationSurfaceArea_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularReabsorptionFiltrationSurfaceArea (::std::unique_ptr< LeftTubularReabsorptionFiltrationSurfaceArea_type > p);

          //@}

          /**
           * @name LeftTubularReabsorptionFluidPermeability
           *
           * @brief Accessor and modifier functions for the %LeftTubularReabsorptionFluidPermeability
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerPressurePerAreaData LeftTubularReabsorptionFluidPermeability_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularReabsorptionFluidPermeability_type > LeftTubularReabsorptionFluidPermeability_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularReabsorptionFluidPermeability_type, char > LeftTubularReabsorptionFluidPermeability_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularReabsorptionFluidPermeability_optional&
          LeftTubularReabsorptionFluidPermeability () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularReabsorptionFluidPermeability_optional&
          LeftTubularReabsorptionFluidPermeability ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularReabsorptionFluidPermeability (const LeftTubularReabsorptionFluidPermeability_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularReabsorptionFluidPermeability (const LeftTubularReabsorptionFluidPermeability_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularReabsorptionFluidPermeability (::std::unique_ptr< LeftTubularReabsorptionFluidPermeability_type > p);

          //@}

          /**
           * @name RenalBloodFlow
           *
           * @brief Accessor and modifier functions for the %RenalBloodFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RenalBloodFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RenalBloodFlow_type > RenalBloodFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalBloodFlow_type, char > RenalBloodFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RenalBloodFlow_optional&
          RenalBloodFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RenalBloodFlow_optional&
          RenalBloodFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalBloodFlow (const RenalBloodFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RenalBloodFlow (const RenalBloodFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RenalBloodFlow (::std::unique_ptr< RenalBloodFlow_type > p);

          //@}

          /**
           * @name RenalPlasmaFlow
           *
           * @brief Accessor and modifier functions for the %RenalPlasmaFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RenalPlasmaFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RenalPlasmaFlow_type > RenalPlasmaFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalPlasmaFlow_type, char > RenalPlasmaFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RenalPlasmaFlow_optional&
          RenalPlasmaFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RenalPlasmaFlow_optional&
          RenalPlasmaFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalPlasmaFlow (const RenalPlasmaFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RenalPlasmaFlow (const RenalPlasmaFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RenalPlasmaFlow (::std::unique_ptr< RenalPlasmaFlow_type > p);

          //@}

          /**
           * @name RenalVascularResistance
           *
           * @brief Accessor and modifier functions for the %RenalVascularResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData RenalVascularResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RenalVascularResistance_type > RenalVascularResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalVascularResistance_type, char > RenalVascularResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RenalVascularResistance_optional&
          RenalVascularResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RenalVascularResistance_optional&
          RenalVascularResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalVascularResistance (const RenalVascularResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RenalVascularResistance (const RenalVascularResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RenalVascularResistance (::std::unique_ptr< RenalVascularResistance_type > p);

          //@}

          /**
           * @name RightAfferentArterioleResistance
           *
           * @brief Accessor and modifier functions for the %RightAfferentArterioleResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData RightAfferentArterioleResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightAfferentArterioleResistance_type > RightAfferentArterioleResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightAfferentArterioleResistance_type, char > RightAfferentArterioleResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightAfferentArterioleResistance_optional&
          RightAfferentArterioleResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightAfferentArterioleResistance_optional&
          RightAfferentArterioleResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightAfferentArterioleResistance (const RightAfferentArterioleResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightAfferentArterioleResistance (const RightAfferentArterioleResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightAfferentArterioleResistance (::std::unique_ptr< RightAfferentArterioleResistance_type > p);

          //@}

          /**
           * @name RightBowmansCapsulesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %RightBowmansCapsulesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightBowmansCapsulesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightBowmansCapsulesHydrostaticPressure_type > RightBowmansCapsulesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightBowmansCapsulesHydrostaticPressure_type, char > RightBowmansCapsulesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightBowmansCapsulesHydrostaticPressure_optional&
          RightBowmansCapsulesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightBowmansCapsulesHydrostaticPressure_optional&
          RightBowmansCapsulesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightBowmansCapsulesHydrostaticPressure (const RightBowmansCapsulesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightBowmansCapsulesHydrostaticPressure (const RightBowmansCapsulesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightBowmansCapsulesHydrostaticPressure (::std::unique_ptr< RightBowmansCapsulesHydrostaticPressure_type > p);

          //@}

          /**
           * @name RightBowmansCapsulesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %RightBowmansCapsulesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightBowmansCapsulesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightBowmansCapsulesOsmoticPressure_type > RightBowmansCapsulesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightBowmansCapsulesOsmoticPressure_type, char > RightBowmansCapsulesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightBowmansCapsulesOsmoticPressure_optional&
          RightBowmansCapsulesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightBowmansCapsulesOsmoticPressure_optional&
          RightBowmansCapsulesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightBowmansCapsulesOsmoticPressure (const RightBowmansCapsulesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightBowmansCapsulesOsmoticPressure (const RightBowmansCapsulesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightBowmansCapsulesOsmoticPressure (::std::unique_ptr< RightBowmansCapsulesOsmoticPressure_type > p);

          //@}

          /**
           * @name RightEfferentArterioleResistance
           *
           * @brief Accessor and modifier functions for the %RightEfferentArterioleResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData RightEfferentArterioleResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightEfferentArterioleResistance_type > RightEfferentArterioleResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightEfferentArterioleResistance_type, char > RightEfferentArterioleResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightEfferentArterioleResistance_optional&
          RightEfferentArterioleResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightEfferentArterioleResistance_optional&
          RightEfferentArterioleResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightEfferentArterioleResistance (const RightEfferentArterioleResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightEfferentArterioleResistance (const RightEfferentArterioleResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightEfferentArterioleResistance (::std::unique_ptr< RightEfferentArterioleResistance_type > p);

          //@}

          /**
           * @name RightGlomerularCapillariesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %RightGlomerularCapillariesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightGlomerularCapillariesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularCapillariesHydrostaticPressure_type > RightGlomerularCapillariesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularCapillariesHydrostaticPressure_type, char > RightGlomerularCapillariesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularCapillariesHydrostaticPressure_optional&
          RightGlomerularCapillariesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularCapillariesHydrostaticPressure_optional&
          RightGlomerularCapillariesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularCapillariesHydrostaticPressure (const RightGlomerularCapillariesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularCapillariesHydrostaticPressure (const RightGlomerularCapillariesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularCapillariesHydrostaticPressure (::std::unique_ptr< RightGlomerularCapillariesHydrostaticPressure_type > p);

          //@}

          /**
           * @name RightGlomerularCapillariesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %RightGlomerularCapillariesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightGlomerularCapillariesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularCapillariesOsmoticPressure_type > RightGlomerularCapillariesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularCapillariesOsmoticPressure_type, char > RightGlomerularCapillariesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularCapillariesOsmoticPressure_optional&
          RightGlomerularCapillariesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularCapillariesOsmoticPressure_optional&
          RightGlomerularCapillariesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularCapillariesOsmoticPressure (const RightGlomerularCapillariesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularCapillariesOsmoticPressure (const RightGlomerularCapillariesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularCapillariesOsmoticPressure (::std::unique_ptr< RightGlomerularCapillariesOsmoticPressure_type > p);

          //@}

          /**
           * @name RightGlomerularFiltrationCoefficient
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFiltrationCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerPressureData RightGlomerularFiltrationCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFiltrationCoefficient_type > RightGlomerularFiltrationCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFiltrationCoefficient_type, char > RightGlomerularFiltrationCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFiltrationCoefficient_optional&
          RightGlomerularFiltrationCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFiltrationCoefficient_optional&
          RightGlomerularFiltrationCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFiltrationCoefficient (const RightGlomerularFiltrationCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFiltrationCoefficient (const RightGlomerularFiltrationCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFiltrationCoefficient (::std::unique_ptr< RightGlomerularFiltrationCoefficient_type > p);

          //@}

          /**
           * @name RightGlomerularFiltrationRate
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFiltrationRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RightGlomerularFiltrationRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFiltrationRate_type > RightGlomerularFiltrationRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFiltrationRate_type, char > RightGlomerularFiltrationRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFiltrationRate_optional&
          RightGlomerularFiltrationRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFiltrationRate_optional&
          RightGlomerularFiltrationRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFiltrationRate (const RightGlomerularFiltrationRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFiltrationRate (const RightGlomerularFiltrationRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFiltrationRate (::std::unique_ptr< RightGlomerularFiltrationRate_type > p);

          //@}

          /**
           * @name RightGlomerularFiltrationSurfaceArea
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFiltrationSurfaceArea
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData RightGlomerularFiltrationSurfaceArea_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFiltrationSurfaceArea_type > RightGlomerularFiltrationSurfaceArea_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFiltrationSurfaceArea_type, char > RightGlomerularFiltrationSurfaceArea_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFiltrationSurfaceArea_optional&
          RightGlomerularFiltrationSurfaceArea () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFiltrationSurfaceArea_optional&
          RightGlomerularFiltrationSurfaceArea ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFiltrationSurfaceArea (const RightGlomerularFiltrationSurfaceArea_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFiltrationSurfaceArea (const RightGlomerularFiltrationSurfaceArea_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFiltrationSurfaceArea (::std::unique_ptr< RightGlomerularFiltrationSurfaceArea_type > p);

          //@}

          /**
           * @name RightGlomerularFluidPermeability
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFluidPermeability
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerPressurePerAreaData RightGlomerularFluidPermeability_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFluidPermeability_type > RightGlomerularFluidPermeability_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFluidPermeability_type, char > RightGlomerularFluidPermeability_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFluidPermeability_optional&
          RightGlomerularFluidPermeability () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFluidPermeability_optional&
          RightGlomerularFluidPermeability ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFluidPermeability (const RightGlomerularFluidPermeability_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFluidPermeability (const RightGlomerularFluidPermeability_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFluidPermeability (::std::unique_ptr< RightGlomerularFluidPermeability_type > p);

          //@}

          /**
           * @name RightFiltrationFraction
           *
           * @brief Accessor and modifier functions for the %RightFiltrationFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData RightFiltrationFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightFiltrationFraction_type > RightFiltrationFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightFiltrationFraction_type, char > RightFiltrationFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightFiltrationFraction_optional&
          RightFiltrationFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightFiltrationFraction_optional&
          RightFiltrationFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightFiltrationFraction (const RightFiltrationFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightFiltrationFraction (const RightFiltrationFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightFiltrationFraction (::std::unique_ptr< RightFiltrationFraction_type > p);

          //@}

          /**
           * @name RightNetFiltrationPressure
           *
           * @brief Accessor and modifier functions for the %RightNetFiltrationPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightNetFiltrationPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightNetFiltrationPressure_type > RightNetFiltrationPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightNetFiltrationPressure_type, char > RightNetFiltrationPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightNetFiltrationPressure_optional&
          RightNetFiltrationPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightNetFiltrationPressure_optional&
          RightNetFiltrationPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightNetFiltrationPressure (const RightNetFiltrationPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightNetFiltrationPressure (const RightNetFiltrationPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightNetFiltrationPressure (::std::unique_ptr< RightNetFiltrationPressure_type > p);

          //@}

          /**
           * @name RightNetReabsorptionPressure
           *
           * @brief Accessor and modifier functions for the %RightNetReabsorptionPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightNetReabsorptionPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightNetReabsorptionPressure_type > RightNetReabsorptionPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightNetReabsorptionPressure_type, char > RightNetReabsorptionPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightNetReabsorptionPressure_optional&
          RightNetReabsorptionPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightNetReabsorptionPressure_optional&
          RightNetReabsorptionPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightNetReabsorptionPressure (const RightNetReabsorptionPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightNetReabsorptionPressure (const RightNetReabsorptionPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightNetReabsorptionPressure (::std::unique_ptr< RightNetReabsorptionPressure_type > p);

          //@}

          /**
           * @name RightPeritubularCapillariesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %RightPeritubularCapillariesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightPeritubularCapillariesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightPeritubularCapillariesHydrostaticPressure_type > RightPeritubularCapillariesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightPeritubularCapillariesHydrostaticPressure_type, char > RightPeritubularCapillariesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightPeritubularCapillariesHydrostaticPressure_optional&
          RightPeritubularCapillariesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightPeritubularCapillariesHydrostaticPressure_optional&
          RightPeritubularCapillariesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightPeritubularCapillariesHydrostaticPressure (const RightPeritubularCapillariesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightPeritubularCapillariesHydrostaticPressure (const RightPeritubularCapillariesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightPeritubularCapillariesHydrostaticPressure (::std::unique_ptr< RightPeritubularCapillariesHydrostaticPressure_type > p);

          //@}

          /**
           * @name RightPeritubularCapillariesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %RightPeritubularCapillariesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightPeritubularCapillariesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightPeritubularCapillariesOsmoticPressure_type > RightPeritubularCapillariesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightPeritubularCapillariesOsmoticPressure_type, char > RightPeritubularCapillariesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightPeritubularCapillariesOsmoticPressure_optional&
          RightPeritubularCapillariesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightPeritubularCapillariesOsmoticPressure_optional&
          RightPeritubularCapillariesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightPeritubularCapillariesOsmoticPressure (const RightPeritubularCapillariesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightPeritubularCapillariesOsmoticPressure (const RightPeritubularCapillariesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightPeritubularCapillariesOsmoticPressure (::std::unique_ptr< RightPeritubularCapillariesOsmoticPressure_type > p);

          //@}

          /**
           * @name RightReabsorptionFiltrationCoefficient
           *
           * @brief Accessor and modifier functions for the %RightReabsorptionFiltrationCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerPressureData RightReabsorptionFiltrationCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightReabsorptionFiltrationCoefficient_type > RightReabsorptionFiltrationCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightReabsorptionFiltrationCoefficient_type, char > RightReabsorptionFiltrationCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightReabsorptionFiltrationCoefficient_optional&
          RightReabsorptionFiltrationCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightReabsorptionFiltrationCoefficient_optional&
          RightReabsorptionFiltrationCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightReabsorptionFiltrationCoefficient (const RightReabsorptionFiltrationCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightReabsorptionFiltrationCoefficient (const RightReabsorptionFiltrationCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightReabsorptionFiltrationCoefficient (::std::unique_ptr< RightReabsorptionFiltrationCoefficient_type > p);

          //@}

          /**
           * @name RightReabsorptionRate
           *
           * @brief Accessor and modifier functions for the %RightReabsorptionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RightReabsorptionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightReabsorptionRate_type > RightReabsorptionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightReabsorptionRate_type, char > RightReabsorptionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightReabsorptionRate_optional&
          RightReabsorptionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightReabsorptionRate_optional&
          RightReabsorptionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightReabsorptionRate (const RightReabsorptionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightReabsorptionRate (const RightReabsorptionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightReabsorptionRate (::std::unique_ptr< RightReabsorptionRate_type > p);

          //@}

          /**
           * @name RightTubularOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %RightTubularOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightTubularOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularOsmoticPressure_type > RightTubularOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularOsmoticPressure_type, char > RightTubularOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularOsmoticPressure_optional&
          RightTubularOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularOsmoticPressure_optional&
          RightTubularOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularOsmoticPressure (const RightTubularOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularOsmoticPressure (const RightTubularOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularOsmoticPressure (::std::unique_ptr< RightTubularOsmoticPressure_type > p);

          //@}

          /**
           * @name RightTubularHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %RightTubularHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightTubularHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularHydrostaticPressure_type > RightTubularHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularHydrostaticPressure_type, char > RightTubularHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularHydrostaticPressure_optional&
          RightTubularHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularHydrostaticPressure_optional&
          RightTubularHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularHydrostaticPressure (const RightTubularHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularHydrostaticPressure (const RightTubularHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularHydrostaticPressure (::std::unique_ptr< RightTubularHydrostaticPressure_type > p);

          //@}

          /**
           * @name RightTubularReabsorptionFiltrationSurfaceArea
           *
           * @brief Accessor and modifier functions for the %RightTubularReabsorptionFiltrationSurfaceArea
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData RightTubularReabsorptionFiltrationSurfaceArea_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularReabsorptionFiltrationSurfaceArea_type > RightTubularReabsorptionFiltrationSurfaceArea_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularReabsorptionFiltrationSurfaceArea_type, char > RightTubularReabsorptionFiltrationSurfaceArea_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularReabsorptionFiltrationSurfaceArea_optional&
          RightTubularReabsorptionFiltrationSurfaceArea () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularReabsorptionFiltrationSurfaceArea_optional&
          RightTubularReabsorptionFiltrationSurfaceArea ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularReabsorptionFiltrationSurfaceArea (const RightTubularReabsorptionFiltrationSurfaceArea_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularReabsorptionFiltrationSurfaceArea (const RightTubularReabsorptionFiltrationSurfaceArea_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularReabsorptionFiltrationSurfaceArea (::std::unique_ptr< RightTubularReabsorptionFiltrationSurfaceArea_type > p);

          //@}

          /**
           * @name RightTubularReabsorptionFluidPermeability
           *
           * @brief Accessor and modifier functions for the %RightTubularReabsorptionFluidPermeability
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerPressurePerAreaData RightTubularReabsorptionFluidPermeability_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularReabsorptionFluidPermeability_type > RightTubularReabsorptionFluidPermeability_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularReabsorptionFluidPermeability_type, char > RightTubularReabsorptionFluidPermeability_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularReabsorptionFluidPermeability_optional&
          RightTubularReabsorptionFluidPermeability () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularReabsorptionFluidPermeability_optional&
          RightTubularReabsorptionFluidPermeability ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularReabsorptionFluidPermeability (const RightTubularReabsorptionFluidPermeability_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularReabsorptionFluidPermeability (const RightTubularReabsorptionFluidPermeability_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularReabsorptionFluidPermeability (::std::unique_ptr< RightTubularReabsorptionFluidPermeability_type > p);

          //@}

          /**
           * @name UrinationRate
           *
           * @brief Accessor and modifier functions for the %UrinationRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData UrinationRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrinationRate_type > UrinationRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrinationRate_type, char > UrinationRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrinationRate_optional&
          UrinationRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrinationRate_optional&
          UrinationRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrinationRate (const UrinationRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrinationRate (const UrinationRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrinationRate (::std::unique_ptr< UrinationRate_type > p);

          //@}

          /**
           * @name UrineOsmolality
           *
           * @brief Accessor and modifier functions for the %UrineOsmolality
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarOsmolalityData UrineOsmolality_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineOsmolality_type > UrineOsmolality_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineOsmolality_type, char > UrineOsmolality_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineOsmolality_optional&
          UrineOsmolality () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineOsmolality_optional&
          UrineOsmolality ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineOsmolality (const UrineOsmolality_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineOsmolality (const UrineOsmolality_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineOsmolality (::std::unique_ptr< UrineOsmolality_type > p);

          //@}

          /**
           * @name UrineOsmolarity
           *
           * @brief Accessor and modifier functions for the %UrineOsmolarity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarOsmolarityData UrineOsmolarity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineOsmolarity_type > UrineOsmolarity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineOsmolarity_type, char > UrineOsmolarity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineOsmolarity_optional&
          UrineOsmolarity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineOsmolarity_optional&
          UrineOsmolarity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineOsmolarity (const UrineOsmolarity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineOsmolarity (const UrineOsmolarity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineOsmolarity (::std::unique_ptr< UrineOsmolarity_type > p);

          //@}

          /**
           * @name UrineProductionRate
           *
           * @brief Accessor and modifier functions for the %UrineProductionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData UrineProductionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineProductionRate_type > UrineProductionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineProductionRate_type, char > UrineProductionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineProductionRate_optional&
          UrineProductionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineProductionRate_optional&
          UrineProductionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineProductionRate (const UrineProductionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineProductionRate (const UrineProductionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineProductionRate (::std::unique_ptr< UrineProductionRate_type > p);

          //@}

          /**
           * @name UrineSpecificGravity
           *
           * @brief Accessor and modifier functions for the %UrineSpecificGravity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData UrineSpecificGravity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineSpecificGravity_type > UrineSpecificGravity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineSpecificGravity_type, char > UrineSpecificGravity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineSpecificGravity_optional&
          UrineSpecificGravity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineSpecificGravity_optional&
          UrineSpecificGravity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineSpecificGravity (const UrineSpecificGravity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineSpecificGravity (const UrineSpecificGravity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineSpecificGravity (::std::unique_ptr< UrineSpecificGravity_type > p);

          //@}

          /**
           * @name UrineVolume
           *
           * @brief Accessor and modifier functions for the %UrineVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData UrineVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineVolume_type > UrineVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineVolume_type, char > UrineVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineVolume_optional&
          UrineVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineVolume_optional&
          UrineVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineVolume (const UrineVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineVolume (const UrineVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineVolume (::std::unique_ptr< UrineVolume_type > p);

          //@}

          /**
           * @name UrineUreaNitrogenConcentration
           *
           * @brief Accessor and modifier functions for the %UrineUreaNitrogenConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData UrineUreaNitrogenConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineUreaNitrogenConcentration_type > UrineUreaNitrogenConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineUreaNitrogenConcentration_type, char > UrineUreaNitrogenConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineUreaNitrogenConcentration_optional&
          UrineUreaNitrogenConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineUreaNitrogenConcentration_optional&
          UrineUreaNitrogenConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineUreaNitrogenConcentration (const UrineUreaNitrogenConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineUreaNitrogenConcentration (const UrineUreaNitrogenConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineUreaNitrogenConcentration (::std::unique_ptr< UrineUreaNitrogenConcentration_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          RenalSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RenalSystemData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RenalSystemData (const RenalSystemData& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RenalSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RenalSystemData&
          operator= (const RenalSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~RenalSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          GlomerularFiltrationRate_optional GlomerularFiltrationRate_;
          FiltrationFraction_optional FiltrationFraction_;
          LeftAfferentArterioleResistance_optional LeftAfferentArterioleResistance_;
          LeftBowmansCapsulesHydrostaticPressure_optional LeftBowmansCapsulesHydrostaticPressure_;
          LeftBowmansCapsulesOsmoticPressure_optional LeftBowmansCapsulesOsmoticPressure_;
          LeftEfferentArterioleResistance_optional LeftEfferentArterioleResistance_;
          LeftGlomerularCapillariesHydrostaticPressure_optional LeftGlomerularCapillariesHydrostaticPressure_;
          LeftGlomerularCapillariesOsmoticPressure_optional LeftGlomerularCapillariesOsmoticPressure_;
          LeftGlomerularFiltrationCoefficient_optional LeftGlomerularFiltrationCoefficient_;
          LeftGlomerularFiltrationRate_optional LeftGlomerularFiltrationRate_;
          LeftGlomerularFiltrationSurfaceArea_optional LeftGlomerularFiltrationSurfaceArea_;
          LeftGlomerularFluidPermeability_optional LeftGlomerularFluidPermeability_;
          LeftFiltrationFraction_optional LeftFiltrationFraction_;
          LeftNetFiltrationPressure_optional LeftNetFiltrationPressure_;
          LeftNetReabsorptionPressure_optional LeftNetReabsorptionPressure_;
          LeftPeritubularCapillariesHydrostaticPressure_optional LeftPeritubularCapillariesHydrostaticPressure_;
          LeftPeritubularCapillariesOsmoticPressure_optional LeftPeritubularCapillariesOsmoticPressure_;
          LeftReabsorptionFiltrationCoefficient_optional LeftReabsorptionFiltrationCoefficient_;
          LeftReabsorptionRate_optional LeftReabsorptionRate_;
          LeftTubularOsmoticPressure_optional LeftTubularOsmoticPressure_;
          LeftTubularHydrostaticPressure_optional LeftTubularHydrostaticPressure_;
          LeftTubularReabsorptionFiltrationSurfaceArea_optional LeftTubularReabsorptionFiltrationSurfaceArea_;
          LeftTubularReabsorptionFluidPermeability_optional LeftTubularReabsorptionFluidPermeability_;
          RenalBloodFlow_optional RenalBloodFlow_;
          RenalPlasmaFlow_optional RenalPlasmaFlow_;
          RenalVascularResistance_optional RenalVascularResistance_;
          RightAfferentArterioleResistance_optional RightAfferentArterioleResistance_;
          RightBowmansCapsulesHydrostaticPressure_optional RightBowmansCapsulesHydrostaticPressure_;
          RightBowmansCapsulesOsmoticPressure_optional RightBowmansCapsulesOsmoticPressure_;
          RightEfferentArterioleResistance_optional RightEfferentArterioleResistance_;
          RightGlomerularCapillariesHydrostaticPressure_optional RightGlomerularCapillariesHydrostaticPressure_;
          RightGlomerularCapillariesOsmoticPressure_optional RightGlomerularCapillariesOsmoticPressure_;
          RightGlomerularFiltrationCoefficient_optional RightGlomerularFiltrationCoefficient_;
          RightGlomerularFiltrationRate_optional RightGlomerularFiltrationRate_;
          RightGlomerularFiltrationSurfaceArea_optional RightGlomerularFiltrationSurfaceArea_;
          RightGlomerularFluidPermeability_optional RightGlomerularFluidPermeability_;
          RightFiltrationFraction_optional RightFiltrationFraction_;
          RightNetFiltrationPressure_optional RightNetFiltrationPressure_;
          RightNetReabsorptionPressure_optional RightNetReabsorptionPressure_;
          RightPeritubularCapillariesHydrostaticPressure_optional RightPeritubularCapillariesHydrostaticPressure_;
          RightPeritubularCapillariesOsmoticPressure_optional RightPeritubularCapillariesOsmoticPressure_;
          RightReabsorptionFiltrationCoefficient_optional RightReabsorptionFiltrationCoefficient_;
          RightReabsorptionRate_optional RightReabsorptionRate_;
          RightTubularOsmoticPressure_optional RightTubularOsmoticPressure_;
          RightTubularHydrostaticPressure_optional RightTubularHydrostaticPressure_;
          RightTubularReabsorptionFiltrationSurfaceArea_optional RightTubularReabsorptionFiltrationSurfaceArea_;
          RightTubularReabsorptionFluidPermeability_optional RightTubularReabsorptionFluidPermeability_;
          UrinationRate_optional UrinationRate_;
          UrineOsmolality_optional UrineOsmolality_;
          UrineOsmolarity_optional UrineOsmolarity_;
          UrineProductionRate_optional UrineProductionRate_;
          UrineSpecificGravity_optional UrineSpecificGravity_;
          UrineVolume_optional UrineVolume_;
          UrineUreaNitrogenConcentration_optional UrineUreaNitrogenConcentration_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        __attribute__ ((visibility ("default")))
        ::std::ostream&
        operator<< (::std::ostream&, const RenalSystemData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        __attribute__ ((visibility ("default")))
        void
        operator<< (::xercesc::DOMElement&, const RenalSystemData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "decimal.hxx"

#include "double-parsing.hxx"
#include "decimal-parsing.hxx"

#include "double-serialization.hxx"
#include "decimal-serialization.hxx"
//
// End epilogue.

#endif // RENAL_SYSTEM_DATA_HXX
