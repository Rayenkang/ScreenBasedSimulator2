// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from SubstancePharmacodynamicsData.xsd.
 */

#ifndef SUBSTANCE_PHARMACODYNAMICS_DATA_HXX
#define SUBSTANCE_PHARMACODYNAMICS_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "cdm-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class SubstancePharmacodynamicsData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ObjectData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFractionData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassPerVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class enumPupilState;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %SubstancePharmacodynamicsData schema type.
         *
         * @nosubgrouping
         */
        class SubstancePharmacodynamicsData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name Bronchodilation
           *
           * @brief Accessor and modifier functions for the %Bronchodilation
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData Bronchodilation_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Bronchodilation_type, char > Bronchodilation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Bronchodilation_type&
          Bronchodilation () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Bronchodilation_type&
          Bronchodilation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Bronchodilation (const Bronchodilation_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Bronchodilation (::std::unique_ptr< Bronchodilation_type > p);

          //@}

          /**
           * @name DiastolicPressureModifier
           *
           * @brief Accessor and modifier functions for the %DiastolicPressureModifier
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData DiastolicPressureModifier_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DiastolicPressureModifier_type, char > DiastolicPressureModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DiastolicPressureModifier_type&
          DiastolicPressureModifier () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DiastolicPressureModifier_type&
          DiastolicPressureModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DiastolicPressureModifier (const DiastolicPressureModifier_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          DiastolicPressureModifier (::std::unique_ptr< DiastolicPressureModifier_type > p);

          //@}

          /**
           * @name EC50
           *
           * @brief Accessor and modifier functions for the %EC50
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData EC50_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EC50_type, char > EC50_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const EC50_type&
          EC50 () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          EC50_type&
          EC50 ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EC50 (const EC50_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          EC50 (::std::unique_ptr< EC50_type > p);

          //@}

          /**
           * @name HeartRateModifier
           *
           * @brief Accessor and modifier functions for the %HeartRateModifier
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData HeartRateModifier_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartRateModifier_type, char > HeartRateModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeartRateModifier_type&
          HeartRateModifier () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeartRateModifier_type&
          HeartRateModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartRateModifier (const HeartRateModifier_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          HeartRateModifier (::std::unique_ptr< HeartRateModifier_type > p);

          //@}

          /**
           * @name NeuromuscularBlock
           *
           * @brief Accessor and modifier functions for the %NeuromuscularBlock
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData NeuromuscularBlock_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NeuromuscularBlock_type, char > NeuromuscularBlock_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NeuromuscularBlock_type&
          NeuromuscularBlock () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NeuromuscularBlock_type&
          NeuromuscularBlock ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NeuromuscularBlock (const NeuromuscularBlock_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          NeuromuscularBlock (::std::unique_ptr< NeuromuscularBlock_type > p);

          //@}

          /**
           * @name PupilState
           *
           * @brief Accessor and modifier functions for the %PupilState
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumPupilState PupilState_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PupilState_type, char > PupilState_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PupilState_type&
          PupilState () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PupilState_type&
          PupilState ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PupilState (const PupilState_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          PupilState (::std::unique_ptr< PupilState_type > p);

          //@}

          /**
           * @name RespirationRateModifier
           *
           * @brief Accessor and modifier functions for the %RespirationRateModifier
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData RespirationRateModifier_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespirationRateModifier_type, char > RespirationRateModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RespirationRateModifier_type&
          RespirationRateModifier () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RespirationRateModifier_type&
          RespirationRateModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespirationRateModifier (const RespirationRateModifier_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          RespirationRateModifier (::std::unique_ptr< RespirationRateModifier_type > p);

          //@}

          /**
           * @name Sedation
           *
           * @brief Accessor and modifier functions for the %Sedation
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData Sedation_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Sedation_type, char > Sedation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Sedation_type&
          Sedation () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Sedation_type&
          Sedation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Sedation (const Sedation_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Sedation (::std::unique_ptr< Sedation_type > p);

          //@}

          /**
           * @name SystolicPressureModifier
           *
           * @brief Accessor and modifier functions for the %SystolicPressureModifier
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData SystolicPressureModifier_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SystolicPressureModifier_type, char > SystolicPressureModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SystolicPressureModifier_type&
          SystolicPressureModifier () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SystolicPressureModifier_type&
          SystolicPressureModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SystolicPressureModifier (const SystolicPressureModifier_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          SystolicPressureModifier (::std::unique_ptr< SystolicPressureModifier_type > p);

          //@}

          /**
           * @name TidalVolumeModifier
           *
           * @brief Accessor and modifier functions for the %TidalVolumeModifier
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData TidalVolumeModifier_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TidalVolumeModifier_type, char > TidalVolumeModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TidalVolumeModifier_type&
          TidalVolumeModifier () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TidalVolumeModifier_type&
          TidalVolumeModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TidalVolumeModifier (const TidalVolumeModifier_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          TidalVolumeModifier (::std::unique_ptr< TidalVolumeModifier_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SubstancePharmacodynamicsData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SubstancePharmacodynamicsData (const Bronchodilation_type&,
                                         const DiastolicPressureModifier_type&,
                                         const EC50_type&,
                                         const HeartRateModifier_type&,
                                         const NeuromuscularBlock_type&,
                                         const PupilState_type&,
                                         const RespirationRateModifier_type&,
                                         const Sedation_type&,
                                         const SystolicPressureModifier_type&,
                                         const TidalVolumeModifier_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstancePharmacodynamicsData (::std::unique_ptr< Bronchodilation_type >,
                                         ::std::unique_ptr< DiastolicPressureModifier_type >,
                                         ::std::unique_ptr< EC50_type >,
                                         ::std::unique_ptr< HeartRateModifier_type >,
                                         ::std::unique_ptr< NeuromuscularBlock_type >,
                                         const PupilState_type&,
                                         ::std::unique_ptr< RespirationRateModifier_type >,
                                         ::std::unique_ptr< Sedation_type >,
                                         ::std::unique_ptr< SystolicPressureModifier_type >,
                                         ::std::unique_ptr< TidalVolumeModifier_type >);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstancePharmacodynamicsData (::std::unique_ptr< Bronchodilation_type >,
                                         ::std::unique_ptr< DiastolicPressureModifier_type >,
                                         ::std::unique_ptr< EC50_type >,
                                         ::std::unique_ptr< HeartRateModifier_type >,
                                         ::std::unique_ptr< NeuromuscularBlock_type >,
                                         ::std::unique_ptr< PupilState_type >,
                                         ::std::unique_ptr< RespirationRateModifier_type >,
                                         ::std::unique_ptr< Sedation_type >,
                                         ::std::unique_ptr< SystolicPressureModifier_type >,
                                         ::std::unique_ptr< TidalVolumeModifier_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SubstancePharmacodynamicsData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstancePharmacodynamicsData (const SubstancePharmacodynamicsData& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SubstancePharmacodynamicsData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstancePharmacodynamicsData&
          operator= (const SubstancePharmacodynamicsData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SubstancePharmacodynamicsData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Bronchodilation_type > Bronchodilation_;
          ::xsd::cxx::tree::one< DiastolicPressureModifier_type > DiastolicPressureModifier_;
          ::xsd::cxx::tree::one< EC50_type > EC50_;
          ::xsd::cxx::tree::one< HeartRateModifier_type > HeartRateModifier_;
          ::xsd::cxx::tree::one< NeuromuscularBlock_type > NeuromuscularBlock_;
          ::xsd::cxx::tree::one< PupilState_type > PupilState_;
          ::xsd::cxx::tree::one< RespirationRateModifier_type > RespirationRateModifier_;
          ::xsd::cxx::tree::one< Sedation_type > Sedation_;
          ::xsd::cxx::tree::one< SystolicPressureModifier_type > SystolicPressureModifier_;
          ::xsd::cxx::tree::one< TidalVolumeModifier_type > TidalVolumeModifier_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream&, const SubstancePharmacodynamicsData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement&, const SubstancePharmacodynamicsData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "decimal.hxx"

#include "double-parsing.hxx"
#include "decimal-parsing.hxx"

#include "double-serialization.hxx"
#include "decimal-serialization.hxx"
//
// End epilogue.

#endif // SUBSTANCE_PHARMACODYNAMICS_DATA_HXX
