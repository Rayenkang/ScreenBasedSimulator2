// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from Systemic.xsd.
 */

#ifndef SYSTEMIC_HXX
#define SYSTEMIC_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "cdm-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class Systemic;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFractionData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumePerTimePerMassData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %Systemic schema type.
         *
         * @nosubgrouping
         */
        class __attribute__ ((visibility ("default"))) Systemic: public ::xml_schema::type
        {
          public:
          /**
           * @name FractionExcretedInFeces
           *
           * @brief Accessor and modifier functions for the %FractionExcretedInFeces
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData FractionExcretedInFeces_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FractionExcretedInFeces_type, char > FractionExcretedInFeces_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const FractionExcretedInFeces_type&
          FractionExcretedInFeces () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          FractionExcretedInFeces_type&
          FractionExcretedInFeces ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FractionExcretedInFeces (const FractionExcretedInFeces_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          FractionExcretedInFeces (::std::unique_ptr< FractionExcretedInFeces_type > p);

          //@}

          /**
           * @name FractionExcretedInUrine
           *
           * @brief Accessor and modifier functions for the %FractionExcretedInUrine
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData FractionExcretedInUrine_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FractionExcretedInUrine_type > FractionExcretedInUrine_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FractionExcretedInUrine_type, char > FractionExcretedInUrine_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FractionExcretedInUrine_optional&
          FractionExcretedInUrine () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FractionExcretedInUrine_optional&
          FractionExcretedInUrine ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FractionExcretedInUrine (const FractionExcretedInUrine_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FractionExcretedInUrine (const FractionExcretedInUrine_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FractionExcretedInUrine (::std::unique_ptr< FractionExcretedInUrine_type > p);

          //@}

          /**
           * @name FractionMetabolizedInGut
           *
           * @brief Accessor and modifier functions for the %FractionMetabolizedInGut
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData FractionMetabolizedInGut_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FractionMetabolizedInGut_type > FractionMetabolizedInGut_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FractionMetabolizedInGut_type, char > FractionMetabolizedInGut_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FractionMetabolizedInGut_optional&
          FractionMetabolizedInGut () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FractionMetabolizedInGut_optional&
          FractionMetabolizedInGut ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FractionMetabolizedInGut (const FractionMetabolizedInGut_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FractionMetabolizedInGut (const FractionMetabolizedInGut_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FractionMetabolizedInGut (::std::unique_ptr< FractionMetabolizedInGut_type > p);

          //@}

          /**
           * @name FractionUnboundInPlasma
           *
           * @brief Accessor and modifier functions for the %FractionUnboundInPlasma
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData FractionUnboundInPlasma_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FractionUnboundInPlasma_type, char > FractionUnboundInPlasma_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const FractionUnboundInPlasma_type&
          FractionUnboundInPlasma () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          FractionUnboundInPlasma_type&
          FractionUnboundInPlasma ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FractionUnboundInPlasma (const FractionUnboundInPlasma_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          FractionUnboundInPlasma (::std::unique_ptr< FractionUnboundInPlasma_type > p);

          //@}

          /**
           * @name IntrinsicClearance
           *
           * @brief Accessor and modifier functions for the %IntrinsicClearance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerMassData IntrinsicClearance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IntrinsicClearance_type, char > IntrinsicClearance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IntrinsicClearance_type&
          IntrinsicClearance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IntrinsicClearance_type&
          IntrinsicClearance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          IntrinsicClearance (const IntrinsicClearance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          IntrinsicClearance (::std::unique_ptr< IntrinsicClearance_type > p);

          //@}

          /**
           * @name RenalClearance
           *
           * @brief Accessor and modifier functions for the %RenalClearance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerMassData RenalClearance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalClearance_type, char > RenalClearance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RenalClearance_type&
          RenalClearance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RenalClearance_type&
          RenalClearance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalClearance (const RenalClearance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          RenalClearance (::std::unique_ptr< RenalClearance_type > p);

          //@}

          /**
           * @name SystemicClearance
           *
           * @brief Accessor and modifier functions for the %SystemicClearance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePerMassData SystemicClearance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SystemicClearance_type, char > SystemicClearance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SystemicClearance_type&
          SystemicClearance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SystemicClearance_type&
          SystemicClearance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SystemicClearance (const SystemicClearance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          SystemicClearance (::std::unique_ptr< SystemicClearance_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Systemic ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Systemic (const FractionExcretedInFeces_type&,
                    const FractionUnboundInPlasma_type&,
                    const IntrinsicClearance_type&,
                    const RenalClearance_type&,
                    const SystemicClearance_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Systemic (::std::unique_ptr< FractionExcretedInFeces_type >,
                    ::std::unique_ptr< FractionUnboundInPlasma_type >,
                    ::std::unique_ptr< IntrinsicClearance_type >,
                    ::std::unique_ptr< RenalClearance_type >,
                    ::std::unique_ptr< SystemicClearance_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Systemic (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Systemic (const Systemic& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Systemic*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Systemic&
          operator= (const Systemic& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Systemic ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< FractionExcretedInFeces_type > FractionExcretedInFeces_;
          FractionExcretedInUrine_optional FractionExcretedInUrine_;
          FractionMetabolizedInGut_optional FractionMetabolizedInGut_;
          ::xsd::cxx::tree::one< FractionUnboundInPlasma_type > FractionUnboundInPlasma_;
          ::xsd::cxx::tree::one< IntrinsicClearance_type > IntrinsicClearance_;
          ::xsd::cxx::tree::one< RenalClearance_type > RenalClearance_;
          ::xsd::cxx::tree::one< SystemicClearance_type > SystemicClearance_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        __attribute__ ((visibility ("default")))
        ::std::ostream&
        operator<< (::std::ostream&, const Systemic&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        __attribute__ ((visibility ("default")))
        void
        operator<< (::xercesc::DOMElement&, const Systemic&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "decimal.hxx"

#include "double-parsing.hxx"
#include "decimal-parsing.hxx"

#include "double-serialization.hxx"
#include "decimal-serialization.hxx"
//
// End epilogue.

#endif // SYSTEMIC_HXX
